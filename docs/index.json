[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/docs/events/events.js",
    "content": "// events\r\n\r\n/**\r\n * missing_parameter event\r\n * @typedef {Object} Events#missing_parameter\r\n * @property {string} functionName - Indicates the function name when the error occurs.\r\n * @example\r\n * TorrentLibraryInstance.on('missing_parameter',function(callback){\r\n *      console.log('Parameter is missing in ' + callback.functionName);\r\n * })\r\n */\r\n\r\n/**\r\n * error_in_function event\r\n * @typedef {Object} Events#error_in_function\r\n * @property {string} functionName - Indicates the function name when the error occurs.\r\n * @property {string} error - The error message got by error.message\r\n * @example\r\n * TorrentLibraryInstance.on('error_in_function',function(callback){\r\n *      console.log('Function ' + callback.functionName + ' has the following error : ' + callback.error);\r\n * })\r\n */\r\n\r\n/**\r\n * addNewPath event\r\n * @typedef {Object} Events#addNewPath\r\n * @property {...string} paths - all the paths that were added\r\n * @example\r\n * TorrentLibraryInstance.on('addNewPath',function(callback){\r\n *      console.log('The following files were added : ' + callback.paths);\r\n * })\r\n */\r\n\r\n/**\r\n * scan event\r\n * @typedef {object} Events#scan\r\n * @property {...string} files - all the files that were found and added if not yet in lib\r\n * @example\r\n * TorrentLibraryInstance.on('scan',function(callback){\r\n *      console.log('The following files were found : ' + callback.files);\r\n * })\r\n */\r\n\r\n/**\r\n * removeOldFiles event\r\n * @typedef {object}  Events#removeOldFiles\r\n * @property {...string} files - all the files that were found and removed if not yet in lib\r\n * @example\r\n * TorrentLibraryInstance.on('removeOldFiles',function(callback){\r\n *      console.log('The following files were added : ' + callback.files);\r\n * })\r\n */\r\n",
    "static": true,
    "longname": "D:/workspaceNodeJs/torrent-files-library/src/docs/events/events.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "typedef",
    "name": "Events#missing_parameter",
    "memberof": "src/docs/events/events.js",
    "static": true,
    "longname": "src/docs/events/events.js~Events#missing_parameter",
    "access": "public",
    "description": "missing_parameter event",
    "examples": [
      "TorrentLibraryInstance.on('missing_parameter',function(callback){\n     console.log('Parameter is missing in ' + callback.functionName);\n})"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "functionName",
        "description": "Indicates the function name when the error occurs."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Events#missing_parameter"
    }
  },
  {
    "__docId__": 50,
    "kind": "typedef",
    "name": "Events#error_in_function",
    "memberof": "src/docs/events/events.js",
    "static": true,
    "longname": "src/docs/events/events.js~Events#error_in_function",
    "access": "public",
    "description": "error_in_function event",
    "examples": [
      "TorrentLibraryInstance.on('error_in_function',function(callback){\n     console.log('Function ' + callback.functionName + ' has the following error : ' + callback.error);\n})"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "functionName",
        "description": "Indicates the function name when the error occurs."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "The error message got by error.message"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Events#error_in_function"
    }
  },
  {
    "__docId__": 51,
    "kind": "typedef",
    "name": "Events#addNewPath",
    "memberof": "src/docs/events/events.js",
    "static": true,
    "longname": "src/docs/events/events.js~Events#addNewPath",
    "access": "public",
    "description": "addNewPath event",
    "examples": [
      "TorrentLibraryInstance.on('addNewPath',function(callback){\n     console.log('The following files were added : ' + callback.paths);\n})"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": false,
        "name": "paths",
        "description": "all the paths that were added"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Events#addNewPath"
    }
  },
  {
    "__docId__": 52,
    "kind": "typedef",
    "name": "Events#scan",
    "memberof": "src/docs/events/events.js",
    "static": true,
    "longname": "src/docs/events/events.js~Events#scan",
    "access": "public",
    "description": "scan event",
    "examples": [
      "TorrentLibraryInstance.on('scan',function(callback){\n     console.log('The following files were found : ' + callback.files);\n})"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": false,
        "name": "files",
        "description": "all the files that were found and added if not yet in lib"
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "Events#scan"
    }
  },
  {
    "__docId__": 53,
    "kind": "typedef",
    "name": "Events#removeOldFiles",
    "memberof": "src/docs/events/events.js",
    "static": true,
    "longname": "src/docs/events/events.js~Events#removeOldFiles",
    "access": "public",
    "description": "removeOldFiles event",
    "examples": [
      "TorrentLibraryInstance.on('removeOldFiles',function(callback){\n     console.log('The following files were added : ' + callback.files);\n})"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": false,
        "name": "files",
        "description": "all the files that were found and removed if not yet in lib"
      }
    ],
    "type": {
      "types": [
        "object"
      ],
      "optional": false,
      "name": "Events#removeOldFiles"
    }
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "src/docs/types/types.js",
    "content": "// ESDoc custom typedef\r\n\r\n/**\r\n * The result of parsing file name\r\n * @typedef {Object} TPN\r\n * @see {@link https://github.com/clement-escolano/parse-torrent-title}\r\n * @property {(string)} title - The file title\r\n * @property {(number)} [season] - The season number\r\n * @property {(number)} [episode] - The episode number\r\n * @property {(number)} [year] - The year\r\n * @property {(string)} [resolution] - The resolution\r\n * @property {(string)} [codec] - The codec\r\n * @property {(string)} [audio] - The audio\r\n * @property {(string)} [group] - The group that releases this file\r\n * @property {(string)} [region] - The region\r\n * @property {(string)} [container] - The container\r\n * @property {(string)} [language] - The file language\r\n * @property {(boolean)} [extended] - extended ?\r\n * @property {(boolean)} [unrated] - unrated ?\r\n * @property {(boolean)} [proper] - proper ?\r\n * @property {(boolean)} [repack] - repack ?\r\n * @property {(boolean)} [convert] - convert ?\r\n * @property {(boolean)} [hardcoded] - hardcoded ?\r\n * @property {(boolean)} [retail] - retail ?\r\n * @property {(boolean)} [remastered] - remastered ?\r\n * @property {(string)} [source] - the source\r\n * @example\r\n * {\r\n *         \"container\":\"avi\",\r\n *         \"source\":\"webrip\",\r\n *         \"codec\":\"xvid\",\r\n *         \"season\":4,\r\n *         \"episode\":14,\r\n *         \"language\":\"french\",\r\n *         \"title\":\"The Blacklist\"\r\n * }\r\n */\r\n\r\n/**\r\n * The extended TPN object\r\n * @typedef {TPN} TPN_Extended\r\n * @property {string} filePath - additionnal property useful for this library\r\n * @example\r\n * {\r\n *         \"container\":\"avi\",\r\n *         \"source\":\"webrip\",\r\n *         \"codec\":\"xvid\",\r\n *         \"season\":4,\r\n *         \"episode\":14,\r\n *         \"language\":\"french\",\r\n *         \"title\":\"The Blacklist\",\r\n *         \"filePath\":\"D:\\\\workspaceNodeJs\\\\torrent-files-library\\\\test\\\\folder2\\\\The.Blacklist.S04E14.FRENCH.WEBRip.XviD.avi\"\r\n * }\r\n */\r\n\r\n/**\r\n * The sub way to store all kind of media files found in paths\r\n * @typedef {Set<TPN_Extended>| Map<string,Set<TPN_Extended>} StorageVar\r\n */\r\n\r\n/**\r\n * The master variable where we store all kind of media files found in paths\r\n * @typedef {Map<string, StorageVar>} StoreVar\r\n * @example\r\n * // An example of the variable after the scan method\r\n * [\r\n *      \"MOVIES\" : [\r\n *         {\r\n *            \"year\": 2014,\r\n *            \"resolution\": '1080p',\r\n *            \"source\": 'brrip',\r\n *            \"codec\": 'x264',\r\n *            \"container\": 'mkv',\r\n *            \"title\": 'Captain Russia The Summer Soldier',\r\n *            \"filePath\": \"D:\\somePath\\Captain Russia The Summer Soldier (2014) 1080p BrRip x264.MKV\"\r\n *         }\r\n *      ],\r\n *      \"TV_SERIES\" : [\r\n *          \"The Blacklist\" : [\r\n *              {\r\n *                  \"season\": 4,\r\n *                  \"episode\": 21,\r\n *                  \"source\": \"webrip\",\r\n *                  \"codec\": \"xvid\",\r\n *                  \"container\": \"avi\",\r\n *                  \"language\": \"french\"\r\n *                  \"filePath\" : \"D:\\somePath\\The.Blacklist.S04E21.FRENCH.WEBRip.XviD.avi\"\r\n *              }\r\n *          ]\r\n *      ]\r\n * ]\r\n */\r\n\r\n/**\r\n * The search syntax for number properties : a operator follows by a number\r\n * @typedef {string} numberSearchSyntax\r\n * @example\r\n * '<=25'\r\n * @example\r\n * '=25'\r\n */\r\n\r\n/**\r\n * Number expression for number filtering\r\n * @typedef {Object} numberExpressionObject\r\n * @property {string} operator The operator for matching process\r\n * @property {number} number  The extracted number for matching process\r\n * @example\r\n * { operator: '>=' , number: 5 }\r\n */\r\n\r\n/**\r\n * allows user to provide custom filtering stuff\r\n * @typedef {Object} additionalProperties\r\n * @property {string} type Filter type - Possible values are 'number' , 'string' , 'number'\r\n * @property {string} name The requested property\r\n * @property {boolean|string|string[]|number|numberSearchSyntax} value The requested value\r\n * @example\r\n * { type: 'number', name: 'AnotherField2', value: '<=25' }\r\n * { type: 'boolean', name: 'AnotherField', value: true }\r\n * { type: 'number', name: 'AnotherField2', value: 25 }\r\n * { type: 'string', name: 'AnotherField', value: ['NothingExists', 'NothingExists'] }\r\n */\r\n\r\n/**\r\n * search parameters object\r\n * @typedef {Object} searchParameters - search parameters.\r\n * @property {boolean} [extended=undefined] - extended ?\r\n * @property {boolean} [unrated=undefined] - unrated ?\r\n * @property {boolean} [proper=undefined] - proper ?\r\n * @property {boolean} [repack=undefined] - repack ?\r\n * @property {boolean} [convert=undefined] - convert ?\r\n * @property {boolean} [hardcoded=undefined] - hardcoded ?\r\n * @property {boolean} [retail=undefined] - retail ?\r\n * @property {boolean} [remastered=undefined] - remastered ?\r\n * @property {number|numberSearchSyntax} [season=undefined] - the season\r\n * @property {number|numberSearchSyntax} [episode=undefined] - the episode\r\n * @property {number|numberSearchSyntax} [year=undefined] - the year\r\n * @property {string|string[]} [title=undefined] - the title\r\n * @property {string|string[]} [resolution=undefined] - the resolution\r\n * @property {string|string[]} [codec=undefined] - the codec\r\n * @property {string|string[]} [audio=undefined] - the audio\r\n * @property {string|string[]} [group=undefined] - the group\r\n * @property {string|string[]} [region=undefined] - the region\r\n * @property {string|string[]} [container=undefined] - the container\r\n * @property {string|string[]} [language=undefined] - the language\r\n * @property {string|string[]} [source=undefined] - the source\r\n * @property {additionalProperties[]} [additionalProperties=[]] - additional Properties\r\n */\r\n\r\n/**\r\n * A parsing function to be used with this lib\r\n * @typedef {Function} customParsingFunction\r\n * @param {string} title - The file name\r\n * @return {TPN} the result\r\n * @example\r\n * // default parser used in this lib\r\n * const parser = require(\"parse-torrent-title\").parser;\r\n * @example\r\n * // extended default parser as explained here : https://github.com/clement-escolano/parse-torrent-title#advanced-usage\r\n * const ptt = require(\"parse-torrent-title\");\r\n * ptt.addHandler(\"part\", /Part[. ]([0-9])/i, { type: \"integer\" });\r\n * const parser = ptt.parse;\r\n * @example\r\n * // original parser used in this lib : https://github.com/jy95/torrent-name-parser\r\n * const parser = require('torrent-name-parser');\r\n */\r\n",
    "static": true,
    "longname": "D:/workspaceNodeJs/torrent-files-library/src/docs/types/types.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "typedef",
    "name": "TPN",
    "memberof": "src/docs/types/types.js",
    "static": true,
    "longname": "src/docs/types/types.js~TPN",
    "access": "public",
    "description": "The result of parsing file name",
    "examples": [
      "{\n        \"container\":\"avi\",\n        \"source\":\"webrip\",\n        \"codec\":\"xvid\",\n        \"season\":4,\n        \"episode\":14,\n        \"language\":\"french\",\n        \"title\":\"The Blacklist\"\n}"
    ],
    "see": [
      "{@link https://github.com/clement-escolano/parse-torrent-title}"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "The file title"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "season",
        "description": "The season number"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "episode",
        "description": "The episode number"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "year",
        "description": "The year"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "resolution",
        "description": "The resolution"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "codec",
        "description": "The codec"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "audio",
        "description": "The audio"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "group",
        "description": "The group that releases this file"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "region",
        "description": "The region"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "container",
        "description": "The container"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "language",
        "description": "The file language"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "extended",
        "description": "extended ?"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "unrated",
        "description": "unrated ?"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "proper",
        "description": "proper ?"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "repack",
        "description": "repack ?"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "convert",
        "description": "convert ?"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "hardcoded",
        "description": "hardcoded ?"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "retail",
        "description": "retail ?"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "remastered",
        "description": "remastered ?"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "source",
        "description": "the source"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TPN"
    }
  },
  {
    "__docId__": 56,
    "kind": "typedef",
    "name": "TPN_Extended",
    "memberof": "src/docs/types/types.js",
    "static": true,
    "longname": "src/docs/types/types.js~TPN_Extended",
    "access": "public",
    "description": "The extended TPN object",
    "examples": [
      "{\n        \"container\":\"avi\",\n        \"source\":\"webrip\",\n        \"codec\":\"xvid\",\n        \"season\":4,\n        \"episode\":14,\n        \"language\":\"french\",\n        \"title\":\"The Blacklist\",\n        \"filePath\":\"D:\\\\workspaceNodeJs\\\\torrent-files-library\\\\test\\\\folder2\\\\The.Blacklist.S04E14.FRENCH.WEBRip.XviD.avi\"\n}"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filePath",
        "description": "additionnal property useful for this library"
      }
    ],
    "type": {
      "types": [
        "TPN"
      ],
      "optional": false,
      "name": "TPN_Extended"
    }
  },
  {
    "__docId__": 57,
    "kind": "typedef",
    "name": "StorageVar",
    "memberof": "src/docs/types/types.js",
    "static": true,
    "longname": "src/docs/types/types.js~StorageVar",
    "access": "public",
    "description": "The sub way to store all kind of media files found in paths",
    "type": {
      "types": [
        "Set<TPN_Extended>| Map<string,Set<TPN_Extended>"
      ],
      "optional": false,
      "name": "StorageVar"
    }
  },
  {
    "__docId__": 58,
    "kind": "typedef",
    "name": "StoreVar",
    "memberof": "src/docs/types/types.js",
    "static": true,
    "longname": "src/docs/types/types.js~StoreVar",
    "access": "public",
    "description": "The master variable where we store all kind of media files found in paths",
    "examples": [
      "// An example of the variable after the scan method\n[\n     \"MOVIES\" : [\n        {\n           \"year\": 2014,\n           \"resolution\": '1080p',\n           \"source\": 'brrip',\n           \"codec\": 'x264',\n           \"container\": 'mkv',\n           \"title\": 'Captain Russia The Summer Soldier',\n           \"filePath\": \"D:\\somePath\\Captain Russia The Summer Soldier (2014) 1080p BrRip x264.MKV\"\n        }\n     ],\n     \"TV_SERIES\" : [\n         \"The Blacklist\" : [\n             {\n                 \"season\": 4,\n                 \"episode\": 21,\n                 \"source\": \"webrip\",\n                 \"codec\": \"xvid\",\n                 \"container\": \"avi\",\n                 \"language\": \"french\"\n                 \"filePath\" : \"D:\\somePath\\The.Blacklist.S04E21.FRENCH.WEBRip.XviD.avi\"\n             }\n         ]\n     ]\n]"
    ],
    "type": {
      "types": [
        "Map<string, StorageVar>"
      ],
      "optional": false,
      "name": "StoreVar"
    }
  },
  {
    "__docId__": 59,
    "kind": "typedef",
    "name": "numberSearchSyntax",
    "memberof": "src/docs/types/types.js",
    "static": true,
    "longname": "src/docs/types/types.js~numberSearchSyntax",
    "access": "public",
    "description": "The search syntax for number properties : a operator follows by a number",
    "examples": [
      "'<=25'",
      "'=25'"
    ],
    "type": {
      "types": [
        "string"
      ],
      "optional": false,
      "name": "numberSearchSyntax"
    }
  },
  {
    "__docId__": 60,
    "kind": "typedef",
    "name": "numberExpressionObject",
    "memberof": "src/docs/types/types.js",
    "static": true,
    "longname": "src/docs/types/types.js~numberExpressionObject",
    "access": "public",
    "description": "Number expression for number filtering",
    "examples": [
      "{ operator: '>=' , number: 5 }"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "operator",
        "description": "The operator for matching process"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "The extracted number for matching process"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "numberExpressionObject"
    }
  },
  {
    "__docId__": 61,
    "kind": "typedef",
    "name": "additionalProperties",
    "memberof": "src/docs/types/types.js",
    "static": true,
    "longname": "src/docs/types/types.js~additionalProperties",
    "access": "public",
    "description": "allows user to provide custom filtering stuff",
    "examples": [
      "{ type: 'number', name: 'AnotherField2', value: '<=25' }\n{ type: 'boolean', name: 'AnotherField', value: true }\n{ type: 'number', name: 'AnotherField2', value: 25 }\n{ type: 'string', name: 'AnotherField', value: ['NothingExists', 'NothingExists'] }"
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Filter type - Possible values are 'number' , 'string' , 'number'"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The requested property"
      },
      {
        "nullable": null,
        "types": [
          "boolean",
          "string",
          "string[]",
          "number",
          "numberSearchSyntax"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The requested value"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "additionalProperties"
    }
  },
  {
    "__docId__": 62,
    "kind": "typedef",
    "name": "searchParameters",
    "memberof": "src/docs/types/types.js",
    "static": true,
    "longname": "src/docs/types/types.js~searchParameters",
    "access": "public",
    "description": "search parameters object",
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "extended",
        "description": "extended ?"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "unrated",
        "description": "unrated ?"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "proper",
        "description": "proper ?"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "repack",
        "description": "repack ?"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "convert",
        "description": "convert ?"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "hardcoded",
        "description": "hardcoded ?"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "retail",
        "description": "retail ?"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "remastered",
        "description": "remastered ?"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "numberSearchSyntax"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "season",
        "description": "the season"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "numberSearchSyntax"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "episode",
        "description": "the episode"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "numberSearchSyntax"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "year",
        "description": "the year"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "title",
        "description": "the title"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "resolution",
        "description": "the resolution"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "codec",
        "description": "the codec"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "audio",
        "description": "the audio"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "group",
        "description": "the group"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "region",
        "description": "the region"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "container",
        "description": "the container"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "language",
        "description": "the language"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "string[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "source",
        "description": "the source"
      },
      {
        "nullable": null,
        "types": [
          "additionalProperties[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "additionalProperties",
        "description": "additional Properties"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "searchParameters"
    }
  },
  {
    "__docId__": 63,
    "kind": "typedef",
    "name": "customParsingFunction",
    "memberof": "src/docs/types/types.js",
    "static": true,
    "longname": "src/docs/types/types.js~customParsingFunction",
    "access": "public",
    "description": "A parsing function to be used with this lib",
    "examples": [
      "// default parser used in this lib\nconst parser = require(\"parse-torrent-title\").parser;",
      "// extended default parser as explained here : https://github.com/clement-escolano/parse-torrent-title#advanced-usage\nconst ptt = require(\"parse-torrent-title\");\nptt.addHandler(\"part\", /Part[. ]([0-9])/i, { type: \"integer\" });\nconst parser = ptt.parse;",
      "// original parser used in this lib : https://github.com/jy95/torrent-name-parser\nconst parser = require('torrent-name-parser');"
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "The file name"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TPN"
      ],
      "spread": false,
      "description": "the result"
    },
    "type": {
      "types": [
        "Function"
      ],
      "optional": false,
      "name": "customParsingFunction"
    }
  },
  {
    "__docId__": 64,
    "kind": "file",
    "name": "src/filters/filterBooleanProperty.js",
    "content": "/**\r\n * Provides a map with valid default properties\r\n * @param {searchParameters} searchObject - search parameters\r\n * @return {Map<string, boolean>} the result map\r\n */\r\nexport function filterDefaultBooleanProperties(searchObject) {\r\n  const {\r\n    extended, unrated, proper, repack, convert, hardcoded, retail, remastered,\r\n  } = searchObject;\r\n\r\n\r\n  const propertiesArray = [extended, unrated, proper,\r\n    repack, convert, hardcoded, retail, remastered];\r\n  const propertiesNames = ['extended', 'unrated', 'proper', 'repack', 'convert',\r\n    'hardcoded', 'retail', 'remastered'];\r\n\r\n  return propertiesArray.reduce((propertiesMap, val, index) => {\r\n    // eslint-disable-next-line max-len\r\n    if (val === true || val === false) { propertiesMap.set(propertiesNames[index], val); }\r\n    return propertiesMap;\r\n  }, new Map());\r\n}\r\n\r\n/**\r\n * Remove the default boolean properties\r\n * @param {searchParameters} searchObject - search parameters\r\n * @return {searchParameters} searchParameters without these properties\r\n */\r\nexport function excludeDefaultBooleanProperties(searchObject) {\r\n  let {\r\n    extended, unrated, proper, repack, convert, hardcoded, retail, remastered,\r\n    ...rest\r\n  } = searchObject;\r\n  return rest;\r\n}\r\n\r\n/**\r\n * Filter the set based on boolean properties\r\n * @param {Set<TPN>} set The TPN set\r\n * @param {Map<string, boolean>} propertiesMap The map from filterDefaultBooleanProperties\r\n * @return {Set<TPN>} the filtered set\r\n */\r\nexport function filterByBoolean(set, propertiesMap) {\r\n  // first step : get an array so that we can do filter/reduce stuff\r\n  // second step : iterate the propertiesMap and do filter and return the filtered array\r\n  // val[0] : the key ; val[1] : the value\r\n  return new Set(Array\r\n    .from(propertiesMap.entries())\r\n    .reduce(\r\n      // eslint-disable-next-line max-len\r\n      (currentMoviesArray, val) => currentMoviesArray.filter(TPN => TPN[val[0]] === val[1])\r\n      , [...set],\r\n    ));\r\n}\r\n",
    "static": true,
    "longname": "D:/workspaceNodeJs/torrent-files-library/src/filters/filterBooleanProperty.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "filterDefaultBooleanProperties",
    "memberof": "src/filters/filterBooleanProperty.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/filters/filterBooleanProperty.js~filterDefaultBooleanProperties",
    "access": "public",
    "export": true,
    "importPath": "torrent-files-library/src/filters/filterBooleanProperty.js",
    "importStyle": "{filterDefaultBooleanProperties}",
    "description": "Provides a map with valid default properties",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "searchParameters"
        ],
        "spread": false,
        "optional": false,
        "name": "searchObject",
        "description": "search parameters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Map<string, boolean>"
      ],
      "spread": false,
      "description": "the result map"
    }
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "excludeDefaultBooleanProperties",
    "memberof": "src/filters/filterBooleanProperty.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/filters/filterBooleanProperty.js~excludeDefaultBooleanProperties",
    "access": "public",
    "export": true,
    "importPath": "torrent-files-library/src/filters/filterBooleanProperty.js",
    "importStyle": "{excludeDefaultBooleanProperties}",
    "description": "Remove the default boolean properties",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "searchParameters"
        ],
        "spread": false,
        "optional": false,
        "name": "searchObject",
        "description": "search parameters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "searchParameters"
      ],
      "spread": false,
      "description": "searchParameters without these properties"
    }
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "filterByBoolean",
    "memberof": "src/filters/filterBooleanProperty.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/filters/filterBooleanProperty.js~filterByBoolean",
    "access": "public",
    "export": true,
    "importPath": "torrent-files-library/src/filters/filterBooleanProperty.js",
    "importStyle": "{filterByBoolean}",
    "description": "Filter the set based on boolean properties",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "Set<TPN>"
        ],
        "spread": false,
        "optional": false,
        "name": "set",
        "description": "The TPN set"
      },
      {
        "nullable": null,
        "types": [
          "Map<string, boolean>"
        ],
        "spread": false,
        "optional": false,
        "name": "propertiesMap",
        "description": "The map from filterDefaultBooleanProperties"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Set<TPN>"
      ],
      "spread": false,
      "description": "the filtered set"
    }
  },
  {
    "__docId__": 68,
    "kind": "file",
    "name": "src/filters/filterNumberProperty.js",
    "content": "/**\r\n * Convert the param to valid expression object for filter function\r\n * @param {number|numberSearchSyntax} param The param to be converted\r\n * @return {Object} If valid, returns a object. If not, returns undefined\r\n * @property {string} operator The operator for matching process\r\n * @property {number} number  The extracted number for matching process\r\n * @example\r\n * // returns { operator: '==' , number: 5 }\r\n * convertToValidExpression(5);\r\n * @example\r\n * // returns { operator: '>=' , number: 5 }\r\n * convertToValidExpression(\">5\");\r\n * @example\r\n * // returns undefined\r\n * convertToValidExpression(undefined);\r\n */\r\nexport function convertToValidExpression(param) {\r\n  const validExpression = /^(==|>|<|>=|<=)(\\d+)$/;\r\n  let returnValue;\r\n  // if it is a valid number expression like the regex\r\n  if (validExpression.test(param)) {\r\n    let result = param.match(validExpression);\r\n    returnValue = {\r\n      operator: result[1],\r\n      number: Number(result[2]),\r\n    };\r\n  }\r\n  // if the param is a number\r\n  if (Number.isInteger(param)) {\r\n    returnValue = {\r\n      operator: '==',\r\n      number: param,\r\n    };\r\n  }\r\n  return returnValue;\r\n}\r\n\r\n/**\r\n * Filter function for filterByNumber\r\n * @param {string} property The property to be checked\r\n * @param {Object} expressionObject The object from convertToValidExpression\r\n * @param {string} expressionObject.operator The operator for matching process\r\n * @param {number} expressionObject.number  The extracted number for matching process\r\n * @param {TPN} object the object to be checked\r\n * @return {boolean} the result\r\n */\r\nfunction resolveExpression(property, expressionObject, object) {\r\n  let { operator, number } = expressionObject;\r\n  // No : eval is not all evil but you should know what you are doing\r\n  // eslint-disable-next-line no-eval\r\n  return eval(`${object[property]}${operator}${number}`);\r\n}\r\n\r\n/**\r\n * Provides a map with valid default properties\r\n * @param {searchParameters} searchObject - search parameters\r\n * @return {Map<string, numberExpressionObject>} the result map\r\n */\r\nexport function filterDefaultNumberProperties(searchObject) {\r\n  const {\r\n    season, episode, year,\r\n  } = searchObject;\r\n\r\n\r\n  const propertiesArray = [season, episode, year];\r\n  const propertiesNames = ['season', 'episode', 'year'];\r\n\r\n  return propertiesArray.reduce((propertiesMap, val, index) => {\r\n    if (val !== undefined) {\r\n      propertiesMap.set(propertiesNames[index], convertToValidExpression(val));\r\n    }\r\n    return propertiesMap;\r\n  }, new Map());\r\n}\r\n\r\n/**\r\n * Remove the default number properties\r\n * @param {searchParameters} searchObject - search parameters\r\n * @return {searchParameters} searchParameters without these properties\r\n */\r\nexport function excludeDefaultNumberProperties(searchObject) {\r\n  const {\r\n    season, episode, year,\r\n    ...rest\r\n  } = searchObject;\r\n  return rest;\r\n}\r\n\r\n/**\r\n * Filter the set based on string properties\r\n * @param {Set<TPN>} set The TPN set\r\n * @param {Map<string, numberExpressionObject>} propertiesMap The map from filterDefaultStringProperties\r\n * @return {Set<TPN>} the filtered set\r\n */\r\nexport function filterByNumber(set, propertiesMap) {\r\n  // first step : get an array so that we can do filter/reduce stuff\r\n  // second step : iterate the propertiesMap and do filter and return the filtered array\r\n  // val[0] : the key ; val[1] : the value\r\n  return new Set(Array\r\n    .from(propertiesMap.entries())\r\n    .reduce(\r\n      // eslint-disable-next-line max-len\r\n      (currentMoviesArray, val) => currentMoviesArray.filter(TPN => resolveExpression(val[0], val[1], TPN))\r\n      , [...set],\r\n    ));\r\n}\r\n",
    "static": true,
    "longname": "D:/workspaceNodeJs/torrent-files-library/src/filters/filterNumberProperty.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "convertToValidExpression",
    "memberof": "src/filters/filterNumberProperty.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/filters/filterNumberProperty.js~convertToValidExpression",
    "access": "public",
    "export": true,
    "importPath": "torrent-files-library/src/filters/filterNumberProperty.js",
    "importStyle": "{convertToValidExpression}",
    "description": "Convert the param to valid expression object for filter function",
    "examples": [
      "// returns { operator: '==' , number: 5 }\nconvertToValidExpression(5);",
      "// returns { operator: '>=' , number: 5 }\nconvertToValidExpression(\">5\");",
      "// returns undefined\nconvertToValidExpression(undefined);"
    ],
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "numberSearchSyntax"
        ],
        "spread": false,
        "optional": false,
        "name": "param",
        "description": "The param to be converted"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "operator",
        "description": "The operator for matching process"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "The extracted number for matching process"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "If valid, returns a object. If not, returns undefined"
    }
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "resolveExpression",
    "memberof": "src/filters/filterNumberProperty.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/filters/filterNumberProperty.js~resolveExpression",
    "access": "public",
    "export": false,
    "importPath": "torrent-files-library/src/filters/filterNumberProperty.js",
    "importStyle": null,
    "description": "Filter function for filterByNumber",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "property",
        "description": "The property to be checked"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "expressionObject",
        "description": "The object from convertToValidExpression"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "expressionObject.operator",
        "description": "The operator for matching process"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "expressionObject.number",
        "description": "The extracted number for matching process"
      },
      {
        "nullable": null,
        "types": [
          "TPN"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "the object to be checked"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "the result"
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "filterDefaultNumberProperties",
    "memberof": "src/filters/filterNumberProperty.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/filters/filterNumberProperty.js~filterDefaultNumberProperties",
    "access": "public",
    "export": true,
    "importPath": "torrent-files-library/src/filters/filterNumberProperty.js",
    "importStyle": "{filterDefaultNumberProperties}",
    "description": "Provides a map with valid default properties",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "searchParameters"
        ],
        "spread": false,
        "optional": false,
        "name": "searchObject",
        "description": "search parameters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Map<string, numberExpressionObject>"
      ],
      "spread": false,
      "description": "the result map"
    }
  },
  {
    "__docId__": 72,
    "kind": "function",
    "name": "excludeDefaultNumberProperties",
    "memberof": "src/filters/filterNumberProperty.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/filters/filterNumberProperty.js~excludeDefaultNumberProperties",
    "access": "public",
    "export": true,
    "importPath": "torrent-files-library/src/filters/filterNumberProperty.js",
    "importStyle": "{excludeDefaultNumberProperties}",
    "description": "Remove the default number properties",
    "lineNumber": 81,
    "params": [
      {
        "nullable": null,
        "types": [
          "searchParameters"
        ],
        "spread": false,
        "optional": false,
        "name": "searchObject",
        "description": "search parameters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "searchParameters"
      ],
      "spread": false,
      "description": "searchParameters without these properties"
    }
  },
  {
    "__docId__": 73,
    "kind": "function",
    "name": "filterByNumber",
    "memberof": "src/filters/filterNumberProperty.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/filters/filterNumberProperty.js~filterByNumber",
    "access": "public",
    "export": true,
    "importPath": "torrent-files-library/src/filters/filterNumberProperty.js",
    "importStyle": "{filterByNumber}",
    "description": "Filter the set based on string properties",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "Set<TPN>"
        ],
        "spread": false,
        "optional": false,
        "name": "set",
        "description": "The TPN set"
      },
      {
        "nullable": null,
        "types": [
          "Map<string, numberExpressionObject>"
        ],
        "spread": false,
        "optional": false,
        "name": "propertiesMap",
        "description": "The map from filterDefaultStringProperties"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Set<TPN>"
      ],
      "spread": false,
      "description": "the filtered set"
    }
  },
  {
    "__docId__": 74,
    "kind": "file",
    "name": "src/filters/filterProperties.js",
    "content": "/* eslint-disable no-useless-escape,max-len */\r\n/**\r\n * Boolean properties filter\r\n */\r\nimport {\r\n  filterDefaultBooleanProperties,\r\n  filterByBoolean,\r\n  excludeDefaultBooleanProperties,\r\n} from './filterBooleanProperty';\r\n\r\n/**\r\n * Number properties filter\r\n */\r\nimport {\r\n  convertToValidExpression,\r\n  excludeDefaultNumberProperties,\r\n  filterDefaultNumberProperties,\r\n  filterByNumber,\r\n} from './filterNumberProperty';\r\n\r\n/**\r\n * String properties filter\r\n */\r\nimport {\r\n  excludeDefaultStringProperties,\r\n  filterDefaultStringProperties,\r\n  filterByString,\r\n} from './filterStringProperty';\r\n\r\n/**\r\n * Handle searchParameters provided by user to maps\r\n * @param {searchParameters} searchParameters - search parameters.\r\n * @return {{booleanFieldsSearchMap: Map<string, boolean>, numberFieldsSearchMap: Map<string, numberExpressionObject>, stringFieldsSearchMap: Map<string, string|string[]>}} an object that contains mapped properties for search\r\n */\r\nfunction mapProperties(searchParameters) {\r\n  // organize search based on field type : boolean - string - number\r\n  const booleanFieldsSearchMap = filterDefaultBooleanProperties(searchParameters);\r\n  let leftSearchParameters = excludeDefaultBooleanProperties(searchParameters);\r\n\r\n  const numberFieldsSearchMap = filterDefaultNumberProperties(leftSearchParameters);\r\n  leftSearchParameters = excludeDefaultNumberProperties(leftSearchParameters);\r\n\r\n  const stringFieldsSearchMap = filterDefaultStringProperties(leftSearchParameters);\r\n  leftSearchParameters = excludeDefaultStringProperties(leftSearchParameters);\r\n\r\n  let { additionalProperties } = leftSearchParameters;\r\n  // add the optional new properties , optionally provided by user\r\n  /* istanbul ignore else */\r\n  if (additionalProperties !== undefined) {\r\n    additionalProperties\r\n      .filter(newProperty => newProperty.type === 'boolean')\r\n      .forEach((newProperty) => {\r\n        booleanFieldsSearchMap.set(newProperty.name, newProperty.value);\r\n      });\r\n\r\n    additionalProperties\r\n      .filter(newProperty => newProperty.type === 'number')\r\n      .forEach((newProperty) => {\r\n        let expression = convertToValidExpression(newProperty.value);\r\n        /* istanbul ignore else */\r\n        if (expression !== undefined) {\r\n          numberFieldsSearchMap.set(newProperty.name, expression);\r\n        }\r\n      });\r\n\r\n    additionalProperties\r\n      .filter(newProperty => newProperty.type === 'string')\r\n      .forEach((newProperty) => {\r\n        stringFieldsSearchMap.set(newProperty.name, [...newProperty.value]);\r\n      });\r\n  }\r\n\r\n  return {\r\n    booleanFieldsSearchMap,\r\n    numberFieldsSearchMap,\r\n    stringFieldsSearchMap,\r\n  };\r\n}\r\n\r\n/**\r\n * Filter the movies based on search parameters\r\n * @param {searchParameters} searchParameters - search parameters.\r\n * @param {Set<TPN_Extended>} allMovies - the movies set\r\n * @return {Set<TPN>} the filtered movie set\r\n */\r\nexport function filterMoviesByProperties(searchParameters, allMovies) {\r\n  const {\r\n    booleanFieldsSearchMap, stringFieldsSearchMap,\r\n    numberFieldsSearchMap,\r\n  } = mapProperties(searchParameters);\r\n  const propertiesWithAllProperties\r\n    = [booleanFieldsSearchMap, stringFieldsSearchMap, numberFieldsSearchMap];\r\n  let result = allMovies;\r\n  [filterByBoolean, filterByString, filterByNumber]\r\n    .forEach((filterFunction, index) => {\r\n      result = filterFunction(result, propertiesWithAllProperties[index]);\r\n    });\r\n  return result;\r\n}\r\n\r\n/**\r\n * Filter the tv series based on search parameters\r\n * @param {searchParameters} searchParameters - search parameters.\r\n * @param {(Map<string, Set<TPN>>)} allTvSeries - the tvSeries map\r\n * @return {(Map<string, Set<TPN>>)} the filtered tvSeries map\r\n */\r\nexport function filterTvSeriesByProperties(searchParameters, allTvSeries) {\r\n  const {\r\n    booleanFieldsSearchMap, stringFieldsSearchMap,\r\n    numberFieldsSearchMap,\r\n  } = mapProperties(searchParameters);\r\n  const propertiesWithAllProperties\r\n    = [booleanFieldsSearchMap, stringFieldsSearchMap, numberFieldsSearchMap];\r\n  let result = allTvSeries;\r\n  // filtering stuff\r\n  // it also removes all entries that have an empty Set so that we can clearly see only valid things\r\n\r\n  [filterByBoolean, filterByString, filterByNumber]\r\n    .forEach((filterFunction, index) => {\r\n      result = new Map(Array\r\n        .from(\r\n          result.entries(),\r\n          ([showName, showSet]) => [showName, filterFunction(showSet, propertiesWithAllProperties[index])],\r\n        )\r\n        // eslint-disable-next-line no-unused-vars\r\n        .filter(([showName, showSet]) => showSet.size > 0));\r\n    });\r\n\r\n  return result;\r\n}\r\n",
    "static": true,
    "longname": "D:/workspaceNodeJs/torrent-files-library/src/filters/filterProperties.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "mapProperties",
    "memberof": "src/filters/filterProperties.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/filters/filterProperties.js~mapProperties",
    "access": "public",
    "export": false,
    "importPath": "torrent-files-library/src/filters/filterProperties.js",
    "importStyle": null,
    "description": "Handle searchParameters provided by user to maps",
    "lineNumber": 35,
    "params": [
      {
        "nullable": null,
        "types": [
          "searchParameters"
        ],
        "spread": false,
        "optional": false,
        "name": "searchParameters",
        "description": "search parameters."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{booleanFieldsSearchMap: Map<string, boolean>, numberFieldsSearchMap: Map<string, numberExpressionObject>, stringFieldsSearchMap: Map<string, string|string[]>}"
      ],
      "spread": false,
      "description": "an object that contains mapped properties for search"
    },
    "ignore": true
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "filterMoviesByProperties",
    "memberof": "src/filters/filterProperties.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/filters/filterProperties.js~filterMoviesByProperties",
    "access": "public",
    "export": true,
    "importPath": "torrent-files-library/src/filters/filterProperties.js",
    "importStyle": "{filterMoviesByProperties}",
    "description": "Filter the movies based on search parameters",
    "lineNumber": 86,
    "params": [
      {
        "nullable": null,
        "types": [
          "searchParameters"
        ],
        "spread": false,
        "optional": false,
        "name": "searchParameters",
        "description": "search parameters."
      },
      {
        "nullable": null,
        "types": [
          "Set<TPN_Extended>"
        ],
        "spread": false,
        "optional": false,
        "name": "allMovies",
        "description": "the movies set"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Set<TPN>"
      ],
      "spread": false,
      "description": "the filtered movie set"
    }
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "filterTvSeriesByProperties",
    "memberof": "src/filters/filterProperties.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/filters/filterProperties.js~filterTvSeriesByProperties",
    "access": "public",
    "export": true,
    "importPath": "torrent-files-library/src/filters/filterProperties.js",
    "importStyle": "{filterTvSeriesByProperties}",
    "description": "Filter the tv series based on search parameters",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "searchParameters"
        ],
        "spread": false,
        "optional": false,
        "name": "searchParameters",
        "description": "search parameters."
      },
      {
        "nullable": null,
        "types": [
          "Map<string, Set<TPN>>"
        ],
        "spread": false,
        "optional": false,
        "name": "allTvSeries",
        "description": "the tvSeries map"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Map<string, Set<TPN>>"
      ],
      "spread": false,
      "description": "the filtered tvSeries map"
    }
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "src/filters/filterStringProperty.js",
    "content": "/**\r\n * Provides a map with valid default properties\r\n * @param {searchParameters} searchObject - search parameters\r\n * @return {Map<string, string|string[]>} the result map\r\n */\r\nexport function filterDefaultStringProperties(searchObject) {\r\n  const {\r\n    title, resolution, codec, audio, group, region, container, language, source,\r\n  } = searchObject;\r\n\r\n\r\n  const propertiesArray = [title, resolution, codec, audio, group,\r\n    region, container, language, source];\r\n  const propertiesNames = ['title', 'resolution', 'codec', 'audio', 'group',\r\n    'region', 'container', 'language', 'source'];\r\n\r\n  return propertiesArray.reduce((propertiesMap, val, index) => {\r\n    if (val !== undefined) {\r\n      propertiesMap.set(propertiesNames[index], val);\r\n    }\r\n    return propertiesMap;\r\n  }, new Map());\r\n}\r\n\r\n/**\r\n * Remove the default string properties\r\n * @param {searchParameters} searchObject - search parameters\r\n * @return {searchParameters} searchParameters without these properties\r\n */\r\nexport function excludeDefaultStringProperties(searchObject) {\r\n  let {\r\n    title, resolution, codec, audio, group, region, container, language, source,\r\n    ...rest\r\n  } = searchObject;\r\n  return rest;\r\n}\r\n\r\n/**\r\n * Filter function for filterByString\r\n * @param {string} property The property to be checked\r\n * @param {string[]|string} expected The expected result\r\n * @param {TPN} object the object to be checked\r\n * @return {boolean} the result\r\n */\r\nfunction filterFunctionByType(property, expected, object) {\r\n  if (Array.isArray(expected)) { return expected.includes(object[property]); }\r\n  return object[property] === expected;\r\n}\r\n\r\n/**\r\n * Filter the set based on string properties\r\n * @param {Set<TPN>} set The TPN set\r\n * @param {Map<string, string|string[]>} propertiesMap The map from filterDefaultStringProperties\r\n * @return {Set<TPN>} the filtered set\r\n */\r\nexport function filterByString(set, propertiesMap) {\r\n  // first step : get an array so that we can do filter/reduce stuff\r\n  // second step : iterate the propertiesMap and do filter and return the filtered array\r\n  // val[0] : the key ; val[1] : the value\r\n  return new Set(Array\r\n    .from(propertiesMap.entries())\r\n    .reduce(\r\n      // eslint-disable-next-line max-len\r\n      (currentMoviesArray, val) => currentMoviesArray.filter(TPN => filterFunctionByType(val[0], val[1], TPN))\r\n      , [...set],\r\n    ));\r\n}\r\n",
    "static": true,
    "longname": "D:/workspaceNodeJs/torrent-files-library/src/filters/filterStringProperty.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "filterDefaultStringProperties",
    "memberof": "src/filters/filterStringProperty.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/filters/filterStringProperty.js~filterDefaultStringProperties",
    "access": "public",
    "export": true,
    "importPath": "torrent-files-library/src/filters/filterStringProperty.js",
    "importStyle": "{filterDefaultStringProperties}",
    "description": "Provides a map with valid default properties",
    "lineNumber": 6,
    "params": [
      {
        "nullable": null,
        "types": [
          "searchParameters"
        ],
        "spread": false,
        "optional": false,
        "name": "searchObject",
        "description": "search parameters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Map<string, string|string[]>"
      ],
      "spread": false,
      "description": "the result map"
    }
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "excludeDefaultStringProperties",
    "memberof": "src/filters/filterStringProperty.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/filters/filterStringProperty.js~excludeDefaultStringProperties",
    "access": "public",
    "export": true,
    "importPath": "torrent-files-library/src/filters/filterStringProperty.js",
    "importStyle": "{excludeDefaultStringProperties}",
    "description": "Remove the default string properties",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "searchParameters"
        ],
        "spread": false,
        "optional": false,
        "name": "searchObject",
        "description": "search parameters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "searchParameters"
      ],
      "spread": false,
      "description": "searchParameters without these properties"
    }
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "filterFunctionByType",
    "memberof": "src/filters/filterStringProperty.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/filters/filterStringProperty.js~filterFunctionByType",
    "access": "public",
    "export": false,
    "importPath": "torrent-files-library/src/filters/filterStringProperty.js",
    "importStyle": null,
    "description": "Filter function for filterByString",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "property",
        "description": "The property to be checked"
      },
      {
        "nullable": null,
        "types": [
          "string[]",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "expected",
        "description": "The expected result"
      },
      {
        "nullable": null,
        "types": [
          "TPN"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "the object to be checked"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "the result"
    },
    "ignore": true
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "filterByString",
    "memberof": "src/filters/filterStringProperty.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/filters/filterStringProperty.js~filterByString",
    "access": "public",
    "export": true,
    "importPath": "torrent-files-library/src/filters/filterStringProperty.js",
    "importStyle": "{filterByString}",
    "description": "Filter the set based on string properties",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "Set<TPN>"
        ],
        "spread": false,
        "optional": false,
        "name": "set",
        "description": "The TPN set"
      },
      {
        "nullable": null,
        "types": [
          "Map<string, string|string[]>"
        ],
        "spread": false,
        "optional": false,
        "name": "propertiesMap",
        "description": "The map from filterDefaultStringProperties"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Set<TPN>"
      ],
      "spread": false,
      "description": "the filtered set"
    }
  },
  {
    "__docId__": 83,
    "kind": "file",
    "name": "src/TorrentLibrary.js",
    "content": "/**\r\n * module for exploring directories\r\n * @see {@link https://nspragg.github.io/filehound/}\r\n */\r\nimport FileHound from 'filehound';\r\n\r\n/**\r\n * Access method from module fs (node) with constants\r\n * @see {@link https://nodejs.org/api/fs.html#fs_fs_access_path_mode_callback}\r\n * @see {@link https://nodejs.org/api/fs.html#fs_fs_constants_1}\r\n */\r\nimport {\r\n  access,\r\n  constants as FsConstants,\r\n} from 'fs';\r\n\r\n/**\r\n * Basename and normalize methods from module path (node)\r\n * @see {@link https://nodejs.org/api/path.html#path_path_basename_path_ext}\r\n * @see {@link https://nodejs.org/api/path.html#path_path_normalize_path}\r\n */\r\nimport { basename, normalize } from 'path';\r\n\r\n\r\n/**\r\n * uniq and difference methods from Lodash\r\n * @see {@link https://lodash.com/docs/4.17.4#uniq}\r\n * @see {@link https://lodash.com/docs/4.17.4#difference}\r\n * @see {@link https://lodash.com/docs/4.17.4#partition}\r\n * @see {@link https://lodash.com/docs/4.17.4#cloneDeep}\r\n */\r\nimport { uniq, difference, partition, cloneDeep } from 'lodash';\r\n\r\n/**\r\n * A promise object provided by the bluebird promise library.\r\n * @external {Promise} http://bluebirdjs.com/docs/api-reference\r\n */\r\nimport PromiseLib from 'bluebird';\r\n\r\n/**\r\n * List of video file extensions\r\n * @see {@link https://github.com/sindresorhus/video-extensions}\r\n */\r\nimport videosExtension from 'video-extensions';\r\n\r\n/**\r\n * Default Parser for media files name\r\n * @type {customParsingFunction}\r\n * @external {nameParser} https://github.com/clement-escolano/parse-torrent-title\r\n */\r\nimport { parse as nameParser } from 'parse-torrent-title';\r\n\r\n/**\r\n * @external {EventEmitter} https://nodejs.org/api/events.html#events_class_eventemitter\r\n */\r\nimport EventEmitter from 'events';\r\n\r\n/**\r\n * Filter Properties for filterMovies function\r\n */\r\nimport { filterMoviesByProperties, filterTvSeriesByProperties }\r\n  from './filters/filterProperties';\r\n\r\n/**\r\n * check if an object has these properties and they are not undefined\r\n * @param {Object} obj The object\r\n * @param {Array} properties The properties array\r\n * @return {boolean} The result\r\n */\r\nfunction checkProperties(obj, properties) {\r\n  return properties.every(x => x in obj && obj[x]);\r\n}\r\n\r\n/**\r\n * rejected promise when someone doesn't provide\r\n * @return {Promise} The rejected promise\r\n */\r\nfunction missingParam() {\r\n  return new PromiseLib(((resolve, reject) => {\r\n    reject(new Error('Missing parameter'));\r\n  }));\r\n}\r\n\r\n/**\r\n * Bluebird seems to have an issue with fs.access - Workaround function\r\n * @private\r\n * @param {string} path a path\r\n * @returns {Promise} an Promise object resolved or rejected\r\n * @see {@link https://github.com/petkaantonov/bluebird/issues/1442}\r\n */\r\nfunction promisifiedAccess(path) {\r\n  return new PromiseLib(((resolve, reject) => {\r\n    access(path, FsConstants.F_OK | FsConstants.R_OK, (err) => {\r\n      if (err) reject(err);\r\n      resolve();\r\n    });\r\n  }));\r\n}\r\n\r\n/**\r\n * Class representing the TorrentLibrary\r\n * @extends {EventEmitter}\r\n */\r\nexport default class TorrentLibrary extends EventEmitter {\r\n  /**\r\n     * constant for movie category\r\n     * @since 0.0.0\r\n     * @type {string}\r\n     * @static\r\n     */\r\n  static get MOVIES_TYPE() {\r\n    return 'MOVIES';\r\n  }\r\n\r\n  /**\r\n     * constant for tv series category\r\n     * @type {string}\r\n     * @since 0.0.0\r\n     * @static\r\n     */\r\n  static get TV_SERIES_TYPE() {\r\n    return 'TV_SERIES';\r\n  }\r\n\r\n  /**\r\n     * Create a TorrentLibrary\r\n     * @since 1.0.4\r\n     * @param {Object} [config] - the config object\r\n     * @param {(String)} [config.defaultPath=process.cwd()] - the default path\r\n     * @param {(String[])} [config.paths=[]] - the paths where we are looking the media files\r\n     * @param {(Map<string,string>)} [config.allFilesWithCategory=new Map()] - Mapping filepath => category\r\n     * @param {(Set<TPN_Extended>)} [config.movies=new Set()] - the movies files\r\n     * @param {(Map<string, Set<TPN_Extended>>)} [config.series=new Map()] - the serie files\r\n     * @param {customParsingFunction} [parser=nameParser] - The parsing function to be used with this lib ;\r\n     * default is function parse from parse-torrent-title package\r\n   */\r\n  constructor(\r\n    {\r\n      defaultPath = process.cwd()\r\n      /* istanbul ignore next: tired of writing tests */,\r\n      paths = [] /* istanbul ignore next: tired of writing tests */,\r\n      allFilesWithCategory = new Map()\r\n      /* istanbul ignore next: tired of writing tests */,\r\n      movies = new Set() /* istanbul ignore next: tired of writing tests */,\r\n      series = new Map() /* istanbul ignore next: tired of writing tests */,\r\n    } = {} /* istanbul ignore next: tired of writing tests */,\r\n    parser = nameParser /* istanbul ignore next: tired of writing tests */,\r\n  ) {\r\n    super();\r\n    /**\r\n     * The parsing function to be used with this lib\r\n     * @since 1.4.0\r\n     * @type {customParsingFunction}\r\n     */\r\n    this.parser = parser;\r\n    /**\r\n         * just an easy way to scan the current directory path, if not other paths provided\r\n         * @type  {string}\r\n         * @since 0.0.0\r\n         */\r\n    this.defaultPath = defaultPath;\r\n    /**\r\n         * the paths where we are looking the media files\r\n         * @type {String[]}\r\n         * @since 0.0.0\r\n         * @example\r\n         * // after have added some paths ...\r\n         * [ \"D:\\somePath\", \"D:\\anotherPath\" ]\r\n         */\r\n    this.paths = paths;\r\n    /**\r\n         * The variable where we store all kind of media files found in paths\r\n         * @type {StoreVar}\r\n         * @since 0.0.0\r\n         */\r\n    this.stores = new Map([\r\n      [TorrentLibrary.MOVIES_TYPE, movies],\r\n      [TorrentLibrary.TV_SERIES_TYPE, series],\r\n    ]);\r\n    /**\r\n         * Mapping filepath => category\r\n         * @type {Map<string,string>}\r\n         * @since 0.0.0\r\n         * @example\r\n         * { \"D:\\somePath\\Captain Russia The Summer Soldier (2014) 1080p BrRip x264.MKV\" => TorrentLibrary.MOVIES_TYPE }\r\n         */\r\n    this.categoryForFile = allFilesWithCategory;\r\n    /**\r\n         * Private method for adding new files\r\n         * @private\r\n         * @returns {Promise} an resolved or reject promise\r\n         * @param {string[]} files An array of filePath\r\n         */\r\n    this.addNewFiles = function addNewFiles(files) {\r\n      return new PromiseLib((resolve, reject) => {\r\n        try {\r\n          // find the new files to be added\r\n          const alreadyFoundFiles = [...this.categoryForFile.keys()];\r\n          const newFiles = difference(files, alreadyFoundFiles);\r\n\r\n          // temp var for new files before adding them to stores var\r\n          const moviesSet = new Set();\r\n          const tvSeriesSet = new Set();\r\n\r\n          // get previous result of stores var\r\n          let newMovies = this.allMovies;\r\n          const newTvSeries = this.allTvSeries;\r\n\r\n          // process each file\r\n          for (const file of newFiles) {\r\n            // get data from nameParser lib\r\n            // what we need is only the basename, not the full path\r\n            const jsonFile = this.parser(basename(file));\r\n            // extend this object in order to be used by this library\r\n            Object.assign(jsonFile, { filePath: file });\r\n            // find out which type of this file\r\n            // if it has not undefined properties (season and episode) => TV_SERIES , otherwise MOVIE\r\n            const fileCategory =\r\n                (checkProperties(jsonFile, ['season', 'episode']))\r\n                  ? TorrentLibrary.TV_SERIES_TYPE : TorrentLibrary.MOVIES_TYPE;\r\n            // add it in found files\r\n            this.categoryForFile.set(file, fileCategory);\r\n            // also in temp var\r\n            if (fileCategory !== TorrentLibrary.TV_SERIES_TYPE) {\r\n              moviesSet.add(jsonFile);\r\n            } else {\r\n              tvSeriesSet.add(jsonFile);\r\n            }\r\n          }\r\n\r\n          // add the movies into newMovies\r\n          newMovies = new Set([...newMovies, ...moviesSet]);\r\n\r\n          // add the tv series into newTvSeries\r\n          // First step : find all the series not in newTvSeries and add them to newTvSeries\r\n          difference(\r\n            uniq([...tvSeriesSet].map(tvSeries => tvSeries.title)),\r\n            ...newTvSeries.keys(),\r\n          ).forEach((tvSeriesToInsert) => {\r\n            newTvSeries.set(tvSeriesToInsert, new Set());\r\n          });\r\n\r\n          // Second step : add the new files into the correct tvSeries Set\r\n          uniq([...tvSeriesSet].map(tvSeries => tvSeries.title))\r\n            .forEach((tvSerie) => {\r\n            // get the current set for this tvSerie\r\n              const currentTvSerie = newTvSeries.get(tvSerie);\r\n\r\n              // find all the episodes in the new one for this serie\r\n              const episodes = [...tvSeriesSet]\r\n                .filter(episode => episode.title === tvSerie);\r\n\r\n              // add them and updates newTvSeries\r\n              newTvSeries.set(\r\n                tvSerie,\r\n                new Set([...currentTvSerie, ...episodes]),\r\n              );\r\n            });\r\n\r\n          // updates the stores var\r\n          this.stores.set(TorrentLibrary.MOVIES_TYPE, newMovies);\r\n          this.stores.set(TorrentLibrary.TV_SERIES_TYPE, newTvSeries);\r\n          resolve();\r\n        } catch (err) {\r\n          reject(err);\r\n        }\r\n      }).bind(true);\r\n    };\r\n  }\r\n\r\n  /**\r\n     * Provides the array of files extensions considered to be media extensions\r\n     * @return {string[]} array of files extensions\r\n     * @since 0.0.0\r\n     * @example\r\n     * // Returns [..., 'webm', 'wmv']\r\n     * TorrentLibrary.listVideosExtension()\r\n     */\r\n  static listVideosExtension() {\r\n    return videosExtension;\r\n  }\r\n\r\n  /**\r\n     * Add the path(s) to be analyzed by the library if they exist and are readable\r\n     * @param {...string} paths - A or more path(s)\r\n     * @since 0.0.0\r\n     * @example\r\n     * // return resolved Promise \"All paths were added!\"\r\n     * TorrentLibraryInstance.addNewPath(\"C:\\Users\\jy95\\Desktop\\New folder\",\"C:\\Users\\jy95\\Desktop\\New folder2\");\r\n     * @return {Promise}  On success the promise will be resolved with \"All paths were added!\"<br>\r\n     * On error the promise will be rejected with an Error object \"Missing parameter\" if the argument is missing<br>\r\n     * or an Error object from fs <br>\r\n     * @emits Events#missing_parameter\r\n     * @emits Events#error_in_function\r\n     * @emits Events#addNewPath\r\n     */\r\n  addNewPath(...paths) {\r\n    // the user should provide us at lest a path\r\n    if (paths.length === 0) {\r\n      this.emit('missing_parameter', {\r\n        functionName: 'addNewPath',\r\n      });\r\n      return missingParam();\r\n    }\r\n\r\n    return new PromiseLib(((resolve, reject) => {\r\n      PromiseLib.map(paths, path => promisifiedAccess(path)).then(() => {\r\n        // keep only unique paths\r\n        // use normalize for cross platform's code\r\n        this.paths = uniq([...this.paths, ...paths.map(normalize)]);\r\n        this.emit('addNewPath', { paths: this.paths });\r\n        resolve('All paths were added!');\r\n      }).catch((e) => {\r\n        this.emit('error_in_function', {\r\n          functionName: 'addNewPath',\r\n          error: e.message,\r\n        });\r\n        reject(e);\r\n      });\r\n    })).bind(this);\r\n  }\r\n\r\n  /**\r\n     * Tell us if the user has provided us paths\r\n     * @since 0.0.0\r\n     * @returns {boolean} Has user provided us paths ?\r\n     * @example\r\n     * TorrentLibraryInstance.addNewPath(\"C:\\Users\\jy95\\Desktop\\New folder\",\"C:\\Users\\jy95\\Desktop\\New folder2\");\r\n     * TorrentLibraryInstance.hasPathsProvidedByUser() // TRUE\r\n     */\r\n  hasPathsProvidedByUser() {\r\n    return this.paths.length !== 0;\r\n  }\r\n\r\n  /**\r\n     * Scans the paths in search for new files to be added inside this lib\r\n     * @since 0.0.0\r\n     * @return {Promise}  On success the promise will be resolved with \"Scanning completed\"<br>\r\n     * On error the promise will be rejected with an Error object from sub modules<br>\r\n     * @emits Events#scan\r\n     * @emits Events#error_in_function\r\n     */\r\n  scan() {\r\n    const foundFiles = FileHound.create()\r\n      .paths((this.paths.length === 0) ? this.defaultPath : this.paths)\r\n      .ext(videosExtension)\r\n      .find();\r\n\r\n    return new PromiseLib((resolve, reject) => {\r\n      foundFiles\r\n        .then(files => this.addNewFiles(files)).then(() => {\r\n          this.emit('scan', { files: foundFiles });\r\n          resolve('Scanning completed');\r\n        }).catch((err) => {\r\n          this.emit('error_in_function', {\r\n            functionName: 'scan',\r\n            error: err.message,\r\n          });\r\n          reject(err);\r\n        });\r\n    }).bind(this);\r\n  }\r\n\r\n\r\n  /**\r\n     * Removes files stored in this library\r\n     * @param {...string} files An array of filePath (for example the keys of allFilesWithCategory)\r\n     * @since 1.0.3\r\n     * @return {Promise} an resolved or rejected promise<br>\r\n     * On success, the resolve will contain an message and the removed filePaths<br>\r\n     * On error the promise will be rejected with an Error object from sub modules<br>\r\n     * @example\r\n     * // with multiples files\r\n     * TorrentLibraryInstance.removeOldFiles(\r\n     *    \"D:\\somePath\\Captain Russia The Summer Soldier (2014) 1080p BrRip x264.MKV\",\r\n     *    \"D:\\\\workspaceNodeJs\\\\torrent-files-library\\\\test\\\\folder1\\\\The.Blacklist.S04E21.FRENCH.WEBRip.XviD.avi\"\r\n     * )\r\n     * @emits Events#removeOldFiles\r\n     * @emits Events#error_in_function\r\n     */\r\n  removeOldFiles(...files) {\r\n    return new PromiseLib((resolve, reject) => {\r\n      try {\r\n        // get the data to handle this case\r\n        // in the first group, we got all the tv series files and in the second, the movies\r\n        const processData = partition(files, file =>\r\n          this.categoryForFile.get(file) === TorrentLibrary.TV_SERIES_TYPE);\r\n\r\n        // for movies, just an easy removal\r\n        this.stores.set(\r\n          TorrentLibrary.MOVIES_TYPE,\r\n          new Set([...this.allMovies]\r\n            .filter(movie => !(processData[1].includes(movie.filePath)))),\r\n        );\r\n\r\n        // for the tv-series, a bit more complicated\r\n        // first step : find the unique tv series of these files\r\n        const tvSeriesShows = uniq(processData[0]\r\n          .map(file => this.parser(basename(file)).title));\r\n\r\n        // second step : foreach each series in tvSeriesShows\r\n        const newTvSeriesMap = this.allTvSeries;\r\n\r\n        for (const serie of tvSeriesShows) {\r\n          // get the set for this serie\r\n          const filteredSet = new Set([...newTvSeriesMap.get(serie)]\r\n            .filter(episode =>\r\n              !(processData[0].includes(episode.filePath))));\r\n          // if the filtered set is empty => no more episodes for this series\r\n          if (filteredSet.size === 0) {\r\n            newTvSeriesMap.delete(serie);\r\n          } else newTvSeriesMap.set(serie, filteredSet);\r\n        }\r\n\r\n        // save the updated map\r\n        this.stores.set(TorrentLibrary.TV_SERIES_TYPE, newTvSeriesMap);\r\n\r\n        // remove the mapping\r\n        files.forEach((file) => {\r\n          this.categoryForFile.delete(file);\r\n        });\r\n        this.emit('removeOldFiles', { files });\r\n        resolve({\r\n          message: 'The files have been deleted from the library',\r\n          files,\r\n        });\r\n      } catch (err) {\r\n        this.emit('error_in_function', {\r\n          functionName: 'removeOldFiles',\r\n          error: err.message,\r\n        });\r\n        reject(err);\r\n      }\r\n    }).bind(this);\r\n  }\r\n\r\n  /**\r\n     * Getter for all found movies\r\n     * @since 0.0.0\r\n     * @type {Set<TPN_Extended>}\r\n     * @example\r\n     * // an JSON stringified example of this method\r\n     * [\r\n     *  {\r\n     *   \"year\":2012,\r\n     *   \"source\":\"dvdrip\",\r\n     *   \"codec\":\"xvid\",\r\n     *   \"group\":\"-www.zone-telechargement.ws.avi\",\r\n     *   \"container\":\"avi\",\r\n     *   \"language\":\"truefrench\",\r\n     *   \"title\":\"Bad Ass\",\r\n     *   \"filePath\":\"D:\\\\workspaceNodeJs\\\\torrent-files-library\\\\test\\\\folder1\\\\Bad.Ass.2012.LiMiTED.TRUEFRENCH.DVDRiP.XviD-www.zone-telechargement.ws.avi\"\r\n     *  }\r\n     * ]\r\n     */\r\n  get allMovies() {\r\n    return cloneDeep(this.stores.get(TorrentLibrary.MOVIES_TYPE));\r\n  }\r\n\r\n  /**\r\n     * Getter for all found tv-series\r\n     * @since 0.0.0\r\n     * @type {Map<string, Set<TPN_Extended>>}\r\n     * @example\r\n     * // an JSON stringified example of this method\r\n     * {\r\n   * \"The Blacklist\":[\r\n   *    {\r\n   *      \"season\":4,\r\n   *      \"episode\":21,\r\n   *      \"source\":\"webrip\",\r\n   *      \"codec\":\"xvid\",\r\n   *      \"container\":\"avi\",\r\n   *      \"language\":\"french\",\r\n   *      \"title\":\"The Blacklist\",\r\n   *      \"filePath\":\"D:\\\\workspaceNodeJs\\\\torrent-files-library\\\\test\\\\folder1\\\\The.Blacklist.S04E21.FRENCH.WEBRip.XviD.avi\"\r\n   *   },\r\n   *   {\r\n   *      \"season\":4,\r\n   *      \"episode\":14,\r\n   *      \"source\":\"webrip\",\r\n   *      \"codec\":\"xvid\",\r\n   *      \"container\":\"avi\",\r\n   *      \"language\":\"french\",\r\n   *      \"title\":\"The Blacklist\",\r\n   *      \"filePath\":\"D:\\\\workspaceNodeJs\\\\torrent-files-library\\\\test\\\\folder2\\\\The.Blacklist.S04E14.FRENCH.WEBRip.XviD.avi\"\r\n   *   }\r\n   * ]\r\n* }\r\n     */\r\n  get allTvSeries() {\r\n    return cloneDeep(this.stores.get(TorrentLibrary.TV_SERIES_TYPE));\r\n  }\r\n\r\n  /**\r\n     * Getter for the mapping between filepaths and category\r\n     * @type {Map<string,string>}\r\n     * @since 0.0.0\r\n     * @example\r\n     * { \"D:\\somePath\\Captain Russia The Summer Soldier (2014) 1080p BrRip x264.MKV\" => TorrentLibrary.MOVIES_TYPE }\r\n     */\r\n  get allFilesWithCategory() {\r\n    return cloneDeep(this.categoryForFile);\r\n  }\r\n\r\n  /**\r\n     * Returns an JSON stringified of the current state\r\n     * @since 1.0.3\r\n     * @see {@link https://github.com/jy95/torrent-files-library/blob/master/test/fixtures/example.json}\r\n     * @return {string} json - the JSON stringified\r\n     */\r\n  toJSON() {\r\n    const tvSeries = this.allTvSeries;\r\n    return `{\r\n    \"paths\":${JSON.stringify([...this.paths])},\r\n    \"allFilesWithCategory\":${JSON.stringify([...this.allFilesWithCategory])},\r\n    \"movies\":${JSON.stringify([...this.allMovies])},\r\n    \"tv-series\":${JSON.stringify([...tvSeries].map(serie =>\r\n    // serie[0] contains the title and [1] the wrong JSON ; let fix it\r\n    [serie[0], [...tvSeries.get(serie[0])]]))}\r\n    }`;\r\n  }\r\n\r\n  /**\r\n     * Creates an instance of TorrentLibrary\r\n     * @param {Object} [json] - the JSON object of toJSON() string\r\n     * @param {(String[])} json.paths - the paths where we are looking the media files\r\n     * @param {(Array.<Array.<String,String>>)} json.allFilesWithCategory - Mapping filepath => category\r\n     * @param {(TPN_Extended[])} json.movies - the movies files\r\n     * @param {(Array.<Array.<String,TPN_Extended[]>>)} json.tv-series - the serie files\r\n     * @param {customParsingFunction} [parser=nameParser] - The custom parser you want to use\r\n     * @see {@link https://github.com/jy95/torrent-files-library/tree/master/tests/fixtures/example.json} for an param example\r\n     * @since 1.2.0\r\n     * @return {TorrentLibrary} an TorrentLibrary instance\r\n     * @example\r\n     * // creates an new instance from another one\r\n     *   const createdInstance = TorrentLibrary.createFromJSON(\r\n     *      JSON.parse(libInstance.toJSON()),\r\n     *   );\r\n     * @example\r\n     * // As explained there : https://github.com/clement-escolano/parse-torrent-title#regular-expressions\r\n     * // If you want an extra field to be populated\r\n     * const ptt = require(\"parse-torrent-title\");\r\n     * ptt.addHandler(\"part\", /Part[. ]([0-9])/i, { type: \"integer\" });\r\n     * // creates an new instance from another one; with custom parser\r\n     *   const createdInstance = TorrentLibrary.createFromJSON(\r\n     *      JSON.parse(libInstance.toJSON()),\r\n     *      ptt.parse\r\n     *   );\r\n     */\r\n  static createFromJSON(json, parser = nameParser) {\r\n    let config = json;\r\n    // transform the param\r\n    /* istanbul ignore else */\r\n    if (json.allFilesWithCategory) {\r\n      config.allFilesWithCategory = new Map(json.allFilesWithCategory);\r\n    }\r\n    /* istanbul ignore else */\r\n    if (json.movies) {\r\n      config.movies = new Set(json.movies);\r\n    }\r\n    /* istanbul ignore else */\r\n    if (json['tv-series']) {\r\n      let createdMap = new Map();\r\n      for (let [serieTitle, setSerie] of json['tv-series']) {\r\n        createdMap.set(serieTitle, new Set(setSerie));\r\n      }\r\n      config.series = createdMap;\r\n    }\r\n    return new TorrentLibrary(config, parser);\r\n  }\r\n\r\n  /**\r\n   * Filter the movies based on search parameters\r\n   * @param {searchParameters} searchParameters - search parameters.\r\n   * @return {Set<TPN>} the filtered movie set\r\n   * @since 1.3.0\r\n   */\r\n  filterMovies(searchParameters = {\r\n    // boolean properties\r\n    extended: undefined,\r\n    unrated: undefined,\r\n    proper: undefined,\r\n    repack: undefined,\r\n    convert: undefined,\r\n    hardcoded: undefined,\r\n    retail: undefined,\r\n    remastered: undefined,\r\n    // number properties\r\n    season: undefined,\r\n    episode: undefined,\r\n    year: undefined,\r\n    // string properties\r\n    title: undefined,\r\n    resolution: undefined,\r\n    codec: undefined,\r\n    audio: undefined,\r\n    group: undefined,\r\n    region: undefined,\r\n    container: undefined,\r\n    language: undefined,\r\n    source: undefined,\r\n    // new properties\r\n    additionalProperties: [],\r\n  }) {\r\n    // apply params based on types\r\n    return filterMoviesByProperties(searchParameters, this.allMovies);\r\n  }\r\n\r\n  /**\r\n   * Filter the tv-series based on search parameters\r\n   * @param {searchParameters} searchParameters - search parameters.\r\n   * @return {(Map<string, Set<TPN>>)} the filtered movie set\r\n   * @since 1.5.0\r\n   */\r\n  filterTvSeries(searchParameters = {\r\n    // boolean properties\r\n    extended: undefined,\r\n    unrated: undefined,\r\n    proper: undefined,\r\n    repack: undefined,\r\n    convert: undefined,\r\n    hardcoded: undefined,\r\n    retail: undefined,\r\n    remastered: undefined,\r\n    // number properties\r\n    season: undefined,\r\n    episode: undefined,\r\n    year: undefined,\r\n    // string properties\r\n    title: undefined,\r\n    resolution: undefined,\r\n    codec: undefined,\r\n    audio: undefined,\r\n    group: undefined,\r\n    region: undefined,\r\n    container: undefined,\r\n    language: undefined,\r\n    source: undefined,\r\n    // new properties\r\n    additionalProperties: [],\r\n  }) {\r\n    return filterTvSeriesByProperties(searchParameters, this.allTvSeries);\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "D:/workspaceNodeJs/torrent-files-library/src/TorrentLibrary.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 84,
    "kind": "external",
    "name": "Promise",
    "externalLink": "http://bluebirdjs.com/docs/api-reference",
    "memberof": "src/TorrentLibrary.js",
    "static": true,
    "longname": "src/TorrentLibrary.js~Promise",
    "access": "public",
    "description": "A promise object provided by the bluebird promise library.",
    "lineNumber": 38
  },
  {
    "__docId__": 85,
    "kind": "external",
    "name": "nameParser",
    "externalLink": "https://github.com/clement-escolano/parse-torrent-title",
    "memberof": "src/TorrentLibrary.js",
    "static": true,
    "longname": "src/TorrentLibrary.js~nameParser",
    "access": "public",
    "description": "Default Parser for media files name",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "customParsingFunction"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 86,
    "kind": "external",
    "name": "EventEmitter",
    "externalLink": "https://nodejs.org/api/events.html#events_class_eventemitter",
    "memberof": "src/TorrentLibrary.js",
    "static": true,
    "longname": "src/TorrentLibrary.js~EventEmitter",
    "access": "public",
    "description": "",
    "lineNumber": 56
  },
  {
    "__docId__": 87,
    "kind": "function",
    "name": "checkProperties",
    "memberof": "src/TorrentLibrary.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/TorrentLibrary.js~checkProperties",
    "access": "public",
    "export": false,
    "importPath": "torrent-files-library/src/TorrentLibrary.js",
    "importStyle": null,
    "description": "check if an object has these properties and they are not undefined",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "properties",
        "description": "The properties array"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "The result"
    },
    "ignore": true
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "missingParam",
    "memberof": "src/TorrentLibrary.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/TorrentLibrary.js~missingParam",
    "access": "public",
    "export": false,
    "importPath": "torrent-files-library/src/TorrentLibrary.js",
    "importStyle": null,
    "description": "rejected promise when someone doesn't provide",
    "lineNumber": 78,
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "The rejected promise"
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "promisifiedAccess",
    "memberof": "src/TorrentLibrary.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/TorrentLibrary.js~promisifiedAccess",
    "access": "private",
    "export": false,
    "importPath": "torrent-files-library/src/TorrentLibrary.js",
    "importStyle": null,
    "description": "Bluebird seems to have an issue with fs.access - Workaround function",
    "see": [
      "{@link https://github.com/petkaantonov/bluebird/issues/1442}"
    ],
    "lineNumber": 91,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} an Promise object resolved or rejected"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "a path"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "an Promise object resolved or rejected"
    },
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "class",
    "name": "TorrentLibrary",
    "memberof": "src/TorrentLibrary.js",
    "static": true,
    "longname": "src/TorrentLibrary.js~TorrentLibrary",
    "access": "public",
    "export": true,
    "importPath": "torrent-files-library/src/TorrentLibrary.js",
    "importStyle": "TorrentLibrary",
    "description": "Class representing the TorrentLibrary",
    "lineNumber": 104,
    "interface": false,
    "extends": [
      "EventEmitter"
    ]
  },
  {
    "__docId__": 91,
    "kind": "get",
    "name": "MOVIES_TYPE",
    "memberof": "src/TorrentLibrary.js~TorrentLibrary",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/TorrentLibrary.js~TorrentLibrary.MOVIES_TYPE",
    "access": "public",
    "description": "constant for movie category",
    "lineNumber": 111,
    "since": "0.0.0",
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 92,
    "kind": "get",
    "name": "TV_SERIES_TYPE",
    "memberof": "src/TorrentLibrary.js~TorrentLibrary",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/TorrentLibrary.js~TorrentLibrary.TV_SERIES_TYPE",
    "access": "public",
    "description": "constant for tv series category",
    "lineNumber": 121,
    "since": "0.0.0",
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 93,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/TorrentLibrary.js~TorrentLibrary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TorrentLibrary.js~TorrentLibrary#constructor",
    "access": "public",
    "description": "Create a TorrentLibrary",
    "lineNumber": 137,
    "since": "1.0.4",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "config",
        "description": "the config object"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "process.cwd()",
        "defaultRaw": "process.cwd()",
        "name": "config.defaultPath",
        "description": "the default path"
      },
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "config.paths",
        "description": "the paths where we are looking the media files"
      },
      {
        "nullable": null,
        "types": [
          "Map<string,string>"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "new Map()",
        "defaultRaw": "new Map()",
        "name": "config.allFilesWithCategory",
        "description": "Mapping filepath => category"
      },
      {
        "nullable": null,
        "types": [
          "Set<TPN_Extended>"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "new Set()",
        "defaultRaw": "new Set()",
        "name": "config.movies",
        "description": "the movies files"
      },
      {
        "nullable": null,
        "types": [
          "Map<string, Set<TPN_Extended>>"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "new Map()",
        "defaultRaw": "new Map()",
        "name": "config.series",
        "description": "the serie files"
      },
      {
        "nullable": null,
        "types": [
          "customParsingFunction"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "nameParser",
        "defaultRaw": "nameParser",
        "name": "parser",
        "description": "The parsing function to be used with this lib ;\ndefault is function parse from parse-torrent-title package"
      }
    ]
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "parser",
    "memberof": "src/TorrentLibrary.js~TorrentLibrary",
    "static": false,
    "longname": "src/TorrentLibrary.js~TorrentLibrary#parser",
    "access": "public",
    "description": "The parsing function to be used with this lib",
    "lineNumber": 155,
    "since": "1.4.0",
    "type": {
      "nullable": null,
      "types": [
        "customParsingFunction"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "defaultPath",
    "memberof": "src/TorrentLibrary.js~TorrentLibrary",
    "static": false,
    "longname": "src/TorrentLibrary.js~TorrentLibrary#defaultPath",
    "access": "public",
    "description": "just an easy way to scan the current directory path, if not other paths provided",
    "lineNumber": 161,
    "since": "0.0.0",
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "paths",
    "memberof": "src/TorrentLibrary.js~TorrentLibrary",
    "static": false,
    "longname": "src/TorrentLibrary.js~TorrentLibrary#paths",
    "access": "public",
    "description": "the paths where we are looking the media files",
    "examples": [
      "// after have added some paths ...\n[ \"D:\\somePath\", \"D:\\anotherPath\" ]"
    ],
    "lineNumber": 170,
    "since": "0.0.0",
    "type": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "stores",
    "memberof": "src/TorrentLibrary.js~TorrentLibrary",
    "static": false,
    "longname": "src/TorrentLibrary.js~TorrentLibrary#stores",
    "access": "public",
    "description": "The variable where we store all kind of media files found in paths",
    "lineNumber": 176,
    "since": "0.0.0",
    "type": {
      "nullable": null,
      "types": [
        "StoreVar"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "categoryForFile",
    "memberof": "src/TorrentLibrary.js~TorrentLibrary",
    "static": false,
    "longname": "src/TorrentLibrary.js~TorrentLibrary#categoryForFile",
    "access": "public",
    "description": "Mapping filepath => category",
    "examples": [
      "{ \"D:\\somePath\\Captain Russia The Summer Soldier (2014) 1080p BrRip x264.MKV\" => TorrentLibrary.MOVIES_TYPE }"
    ],
    "lineNumber": 187,
    "since": "0.0.0",
    "type": {
      "nullable": null,
      "types": [
        "Map<string,string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "listVideosExtension",
    "memberof": "src/TorrentLibrary.js~TorrentLibrary",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/TorrentLibrary.js~TorrentLibrary.listVideosExtension",
    "access": "public",
    "description": "Provides the array of files extensions considered to be media extensions",
    "examples": [
      "// Returns [..., 'webm', 'wmv']\nTorrentLibrary.listVideosExtension()"
    ],
    "lineNumber": 279,
    "since": "0.0.0",
    "return": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": "array of files extensions"
    },
    "params": []
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "addNewPath",
    "memberof": "src/TorrentLibrary.js~TorrentLibrary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TorrentLibrary.js~TorrentLibrary#addNewPath",
    "access": "public",
    "description": "Add the path(s) to be analyzed by the library if they exist and are readable",
    "examples": [
      "// return resolved Promise \"All paths were added!\"\nTorrentLibraryInstance.addNewPath(\"C:\\Users\\jy95\\Desktop\\New folder\",\"C:\\Users\\jy95\\Desktop\\New folder2\");"
    ],
    "lineNumber": 297,
    "since": "0.0.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": false,
        "name": "paths",
        "description": "A or more path(s)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "On success the promise will be resolved with \"All paths were added!\"<br>\nOn error the promise will be rejected with an Error object \"Missing parameter\" if the argument is missing<br>\nor an Error object from fs <br>"
    },
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "Events#missing_parameter"
      },
      {
        "types": [
          "*"
        ],
        "description": "Events#error_in_function"
      },
      {
        "types": [
          "*"
        ],
        "description": "Events#addNewPath"
      }
    ]
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "hasPathsProvidedByUser",
    "memberof": "src/TorrentLibrary.js~TorrentLibrary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TorrentLibrary.js~TorrentLibrary#hasPathsProvidedByUser",
    "access": "public",
    "description": "Tell us if the user has provided us paths",
    "examples": [
      "TorrentLibraryInstance.addNewPath(\"C:\\Users\\jy95\\Desktop\\New folder\",\"C:\\Users\\jy95\\Desktop\\New folder2\");\nTorrentLibraryInstance.hasPathsProvidedByUser() // TRUE"
    ],
    "lineNumber": 331,
    "since": "0.0.0",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Has user provided us paths ?"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Has user provided us paths ?"
    },
    "params": []
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "scan",
    "memberof": "src/TorrentLibrary.js~TorrentLibrary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TorrentLibrary.js~TorrentLibrary#scan",
    "access": "public",
    "description": "Scans the paths in search for new files to be added inside this lib",
    "lineNumber": 343,
    "since": "0.0.0",
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "On success the promise will be resolved with \"Scanning completed\"<br>\nOn error the promise will be rejected with an Error object from sub modules<br>"
    },
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "Events#scan"
      },
      {
        "types": [
          "*"
        ],
        "description": "Events#error_in_function"
      }
    ],
    "params": []
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "removeOldFiles",
    "memberof": "src/TorrentLibrary.js~TorrentLibrary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TorrentLibrary.js~TorrentLibrary#removeOldFiles",
    "access": "public",
    "description": "Removes files stored in this library",
    "examples": [
      "// with multiples files\nTorrentLibraryInstance.removeOldFiles(\n   \"D:\\somePath\\Captain Russia The Summer Soldier (2014) 1080p BrRip x264.MKV\",\n   \"D:\\\\workspaceNodeJs\\\\torrent-files-library\\\\test\\\\folder1\\\\The.Blacklist.S04E21.FRENCH.WEBRip.XviD.avi\"\n)"
    ],
    "lineNumber": 381,
    "since": "1.0.3",
    "params": [
      {
        "nullable": null,
        "types": [
          "...string"
        ],
        "spread": true,
        "optional": false,
        "name": "files",
        "description": "An array of filePath (for example the keys of allFilesWithCategory)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "an resolved or rejected promise<br>\nOn success, the resolve will contain an message and the removed filePaths<br>\nOn error the promise will be rejected with an Error object from sub modules<br>"
    },
    "emits": [
      {
        "types": [
          "*"
        ],
        "description": "Events#removeOldFiles"
      },
      {
        "types": [
          "*"
        ],
        "description": "Events#error_in_function"
      }
    ]
  },
  {
    "__docId__": 105,
    "kind": "get",
    "name": "allMovies",
    "memberof": "src/TorrentLibrary.js~TorrentLibrary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TorrentLibrary.js~TorrentLibrary#allMovies",
    "access": "public",
    "description": "Getter for all found movies",
    "examples": [
      "// an JSON stringified example of this method\n[\n {\n  \"year\":2012,\n  \"source\":\"dvdrip\",\n  \"codec\":\"xvid\",\n  \"group\":\"-www.zone-telechargement.ws.avi\",\n  \"container\":\"avi\",\n  \"language\":\"truefrench\",\n  \"title\":\"Bad Ass\",\n  \"filePath\":\"D:\\\\workspaceNodeJs\\\\torrent-files-library\\\\test\\\\folder1\\\\Bad.Ass.2012.LiMiTED.TRUEFRENCH.DVDRiP.XviD-www.zone-telechargement.ws.avi\"\n }\n]"
    ],
    "lineNumber": 456,
    "since": "0.0.0",
    "type": {
      "nullable": null,
      "types": [
        "Set<TPN_Extended>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 106,
    "kind": "get",
    "name": "allTvSeries",
    "memberof": "src/TorrentLibrary.js~TorrentLibrary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TorrentLibrary.js~TorrentLibrary#allTvSeries",
    "access": "public",
    "description": "Getter for all found tv-series",
    "examples": [
      "// an JSON stringified example of this method\n{\n\"The Blacklist\":[\n   {\n     \"season\":4,\n     \"episode\":21,\n     \"source\":\"webrip\",\n     \"codec\":\"xvid\",\n     \"container\":\"avi\",\n     \"language\":\"french\",\n     \"title\":\"The Blacklist\",\n     \"filePath\":\"D:\\\\workspaceNodeJs\\\\torrent-files-library\\\\test\\\\folder1\\\\The.Blacklist.S04E21.FRENCH.WEBRip.XviD.avi\"\n  },\n  {\n     \"season\":4,\n     \"episode\":14,\n     \"source\":\"webrip\",\n     \"codec\":\"xvid\",\n     \"container\":\"avi\",\n     \"language\":\"french\",\n     \"title\":\"The Blacklist\",\n     \"filePath\":\"D:\\\\workspaceNodeJs\\\\torrent-files-library\\\\test\\\\folder2\\\\The.Blacklist.S04E14.FRENCH.WEBRip.XviD.avi\"\n  }\n]\n}"
    ],
    "lineNumber": 491,
    "since": "0.0.0",
    "type": {
      "nullable": null,
      "types": [
        "Map<string, Set<TPN_Extended>>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 107,
    "kind": "get",
    "name": "allFilesWithCategory",
    "memberof": "src/TorrentLibrary.js~TorrentLibrary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TorrentLibrary.js~TorrentLibrary#allFilesWithCategory",
    "access": "public",
    "description": "Getter for the mapping between filepaths and category",
    "examples": [
      "{ \"D:\\somePath\\Captain Russia The Summer Soldier (2014) 1080p BrRip x264.MKV\" => TorrentLibrary.MOVIES_TYPE }"
    ],
    "lineNumber": 502,
    "since": "0.0.0",
    "type": {
      "nullable": null,
      "types": [
        "Map<string,string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "toJSON",
    "memberof": "src/TorrentLibrary.js~TorrentLibrary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TorrentLibrary.js~TorrentLibrary#toJSON",
    "access": "public",
    "description": "Returns an JSON stringified of the current state",
    "see": [
      "{@link https://github.com/jy95/torrent-files-library/blob/master/test/fixtures/example.json}"
    ],
    "lineNumber": 512,
    "since": "1.0.3",
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "json - the JSON stringified"
    },
    "params": []
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "createFromJSON",
    "memberof": "src/TorrentLibrary.js~TorrentLibrary",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/TorrentLibrary.js~TorrentLibrary.createFromJSON",
    "access": "public",
    "description": "Creates an instance of TorrentLibrary",
    "examples": [
      "// creates an new instance from another one\n  const createdInstance = TorrentLibrary.createFromJSON(\n     JSON.parse(libInstance.toJSON()),\n  );",
      "// As explained there : https://github.com/clement-escolano/parse-torrent-title#regular-expressions\n// If you want an extra field to be populated\nconst ptt = require(\"parse-torrent-title\");\nptt.addHandler(\"part\", /Part[. ]([0-9])/i, { type: \"integer\" });\n// creates an new instance from another one; with custom parser\n  const createdInstance = TorrentLibrary.createFromJSON(\n     JSON.parse(libInstance.toJSON()),\n     ptt.parse\n  );"
    ],
    "see": [
      "{@link https://github.com/jy95/torrent-files-library/tree/master/tests/fixtures/example.json} for an param example"
    ],
    "lineNumber": 551,
    "since": "1.2.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "json",
        "description": "the JSON object of toJSON() string"
      },
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "json.paths",
        "description": "the paths where we are looking the media files"
      },
      {
        "nullable": null,
        "types": [
          "Array.<Array.<String,String>>"
        ],
        "spread": false,
        "optional": false,
        "name": "json.allFilesWithCategory",
        "description": "Mapping filepath => category"
      },
      {
        "nullable": null,
        "types": [
          "TPN_Extended[]"
        ],
        "spread": false,
        "optional": false,
        "name": "json.movies",
        "description": "the movies files"
      },
      {
        "nullable": null,
        "types": [
          "Array.<Array.<String,TPN_Extended[]>>"
        ],
        "spread": false,
        "optional": false,
        "name": "json.tv-series",
        "description": "the serie files"
      },
      {
        "nullable": null,
        "types": [
          "customParsingFunction"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "nameParser",
        "defaultRaw": "nameParser",
        "name": "parser",
        "description": "The custom parser you want to use"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TorrentLibrary"
      ],
      "spread": false,
      "description": "an TorrentLibrary instance"
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "filterMovies",
    "memberof": "src/TorrentLibrary.js~TorrentLibrary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TorrentLibrary.js~TorrentLibrary#filterMovies",
    "access": "public",
    "description": "Filter the movies based on search parameters",
    "lineNumber": 579,
    "since": "1.3.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "searchParameters"
        ],
        "spread": false,
        "optional": false,
        "name": "searchParameters",
        "description": "search parameters."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Set<TPN>"
      ],
      "spread": false,
      "description": "the filtered movie set"
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "filterTvSeries",
    "memberof": "src/TorrentLibrary.js~TorrentLibrary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/TorrentLibrary.js~TorrentLibrary#filterTvSeries",
    "access": "public",
    "description": "Filter the tv-series based on search parameters",
    "lineNumber": 616,
    "since": "1.5.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "searchParameters"
        ],
        "spread": false,
        "optional": false,
        "name": "searchParameters",
        "description": "search parameters."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Map<string, Set<TPN>>"
      ],
      "spread": false,
      "description": "the filtered movie set"
    }
  },
  {
    "kind": "index",
    "content": "# torrent-files-library [![Build Status](https://img.shields.io/travis/jy95/torrent-files-library.svg)](https://travis-ci.org/jy95/torrent-files-library)  [![Coveralls branch](https://img.shields.io/coveralls/jy95/torrent-files-library/master.svg)](https://coveralls.io/github/jy95/torrent-files-library?branch=master) [![Dependency Status](https://img.shields.io/david/jy95/torrent-files-library.svg)](https://david-dm.org/jy95/torrent-files-library)  [![Dev Dependency Status](https://img.shields.io/david/dev/jy95/torrent-files-library.svg)](https://david-dm.org/jy95/torrent-files-library?type=dev) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)  [![semantic-release](https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg)](https://github.com/semantic-release/semantic-release) [![Join the chat at https://gitter.im/torrent-files-library-/Lobby](https://badges.gitter.im/torrent-files-library-/Lobby.svg)](https://gitter.im/torrent-files-library-/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)  [![Greenkeeper badge](https://badges.greenkeeper.io/jy95/torrent-files-library.svg)](https://greenkeeper.io/)\r\n> Scan directories to build a library of media files (movie or tv show) that follows torrent naming conventions\r\n\r\n## What to do with this library ?\r\n\r\nA lot of things :\r\n* Basic listing purposes :\r\n    * [List found movies](https://jy95.github.io/torrent-files-library/manual/listFoundMovies.html)\r\n    * [List each found tv serie](https://jy95.github.io/torrent-files-library/manual/listEachTvSerie.html)\r\n    * [Detect the category of each file](https://jy95.github.io/torrent-files-library/manual/getCategoryForEachFile.html)\r\n* Filtering purposes :\r\n    * [Filter movies based on search parameters](https://jy95.github.io/torrent-files-library/manual/filterMoviesByParameters.html)\r\n    * [Filter tv-shown based on search parameters](https://jy95.github.io/torrent-files-library/manual/filterTvSeriesByParameters.html)\r\n* Miscellaneous purposes\r\n    * [Create custom playlist(s)](https://jy95.github.io/torrent-files-library/manual/createPlaylists.html)\r\n* ...\r\n\r\nDon't hesitate to suggest new features : it is always worthy :)\r\n\r\n## Documentation\r\nFor more examples and API details, see [API documentation with manual](https://jy95.github.io/torrent-files-library/)\r\n\r\n## Installation\r\n\r\nFor npm users :\r\n\r\n```shell\r\n$ npm install --save torrent-files-library\r\n```\r\n\r\nfor Yarn :\r\n```shell\r\n$ yarn add torrent-files-library\r\n```\r\n\r\n## Test\r\n\r\n```shell\r\nnpm test\r\n```\r\n\r\nTo generate a test coverage report:\r\n\r\n```shell\r\nnpm run coverage\r\n```\r\n## Contributing\r\n\r\n* If you're unsure if a feature would make a good addition, you can always [create an issue](https://github.com/jy95/torrent-files-library/issues/new) first.\r\n* We aim for 100% test coverage. Please write tests for any new functionality or changes.\r\n* Any API changes should be fully documented.\r\n* Make sure your code meets our linting standards. Run `npm run lint` to check your code.\r\n* Be mindful of others when making suggestions and/or code reviewing.",
    "longname": "D:\\workspaceNodeJs\\torrent-files-library\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"torrent-files-library\",\n  \"version\": \"0.0.0-development\",\n  \"description\": \"Scan directories to build a library of media files (movie or tv show) that follows torrent naming conventions\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"lib/\"\n  ],\n  \"scripts\": {\n    \"semantic-release\": \"semantic-release -e ./config/release.config.js\",\n    \"compile\": \"babel -d lib/ src/ --source-maps both --no-comments\",\n    \"prepare\": \"npm run compile\",\n    \"test\": \"nyc ava\",\n    \"coverage\": \"nyc report --reporter=text-lcov | coveralls\",\n    \"coverage-html\": \"nyc report --reporter=html\",\n    \"esdoc\": \"node_modules/.bin/esdoc\",\n    \"lint\": \"./node_modules/.bin/eslint -c config/.eslintrc.js ./src ./test --fix\"\n  },\n  \"engines\": {\n    \"node\": \">=6\",\n    \"npm\": \">=5\"\n  },\n  \"keywords\": [\n    \"torrent\",\n    \"library\",\n    \"parser\",\n    \"torrent file\",\n    \"torrent files\",\n    \"parse torrent\",\n    \"parse torrent file\",\n    \"parse torrent files\",\n    \"parse torrent name\",\n    \"torrent library\"\n  ],\n  \"author\": \"jy95\",\n  \"license\": \"MIT\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/jy95/torrent-files-library.git\"\n  },\n  \"devDependencies\": {\n    \"@semantic-release/changelog\": \"^1.0.0\",\n    \"@semantic-release/git\": \"^3.0.0\",\n    \"ava\": \"^0.25.0\",\n    \"babel-cli\": \"^6.26.0\",\n    \"babel-core\": \"^6.26.0\",\n    \"babel-plugin-transform-object-rest-spread\": \"^6.26.0\",\n    \"babel-preset-env\": \"^1.6.1\",\n    \"babel-register\": \"^6.26.0\",\n    \"conventional-changelog-eslint\": \"^0.3.0\",\n    \"coveralls\": \"^3.0.0\",\n    \"esdoc\": \"^1.0.4\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^4.16.0\",\n    \"eslint-config-airbnb-base\": \"^12.0.2\",\n    \"eslint-plugin-import\": \"^2.8.0\",\n    \"nyc\": \"^11.4.1\",\n    \"semantic-release\": \"^13.0.2\",\n    \"sinon\": \"^4.2.2\"\n  },\n  \"dependencies\": {\n    \"bluebird\": \"^3.5.1\",\n    \"filehound\": \"^1.16.2\",\n    \"lodash\": \"^4.17.4\",\n    \"parse-torrent-title\": \"^1.1.0\",\n    \"video-extensions\": \"^1.1.0\"\n  }\n}\n",
    "longname": "D:\\workspaceNodeJs\\torrent-files-library\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": false,
    "content": null,
    "longname": "",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "D:\\workspaceNodeJs\\torrent-files-library\\manual\\assets",
    "name": "./manual/assets",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "D:\\workspaceNodeJs\\torrent-files-library\\manual\\examples\\getCategoryForEachFile.md",
    "name": "./manual/examples/getCategoryForEachFile.md",
    "content": "# Get category for each file\r\n\r\n```js\r\nconst TorrentLibrary = require(\"torrent-files-library\");\r\n\r\nlet paths = [\r\n\t\"D:\\\\DDL\\\\FILMS\", // a path where I can find both movies and tv-series\r\n\t\"D:\\\\DDL\\\\SERIES TV\\\\Le juge et le pilote\" // a path where I can find episodes of a tv-serie\r\n];\r\n\r\n// create an instance\r\nlet libInstance = new TorrentLibrary();\r\n\r\n// add these paths inside this lib\r\nlibInstance\r\n\t.addNewPath(...paths)\r\n\t.then( (message) => {\r\n\t\tconsole.log(message);\r\n\t\treturn libInstance.scan();\r\n\t})\r\n\t.then( (otherMessage) => {\r\n\t\tconsole.log(otherMessage);\r\n\r\n\t\tsetTimeout(function(){\r\n\t\t\t// display the found files and their category\r\n\t\t\tlibInstance\r\n\t\t\t\t.allFilesWithCategory\r\n\t\t\t\t.forEach(function(value,key){\r\n\t\t\t\t\tconsole.log(key + \" : \" + value);\r\n\t\t\t\t});\r\n\t\t}, 1000);\r\n\t})\r\n\t.catch( (err) => {\r\n\t\tconsole.log(err.message);\r\n\t});\r\n```\r\n![fileMappingDemo](asset/fileMapping.png)",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "D:\\workspaceNodeJs\\torrent-files-library\\manual\\examples\\listFoundMovies.md",
    "name": "./manual/examples/listFoundMovies.md",
    "content": "# List found movies\r\n\r\n```js\r\nconst TorrentLibrary = require(\"torrent-files-library\");\r\n\r\nlet paths = [\r\n\t\"D:\\\\DDL\\\\FILMS\", // a path where I can find both movies and tv-series\r\n\t\"D:\\\\DDL\\\\SERIES TV\\\\Le juge et le pilote\" // a path where I can find episodes of a tv-serie\r\n];\r\n\r\n// create an instance\r\nlet libInstance = new TorrentLibrary();\r\n\r\n// add these paths inside this lib\r\nlibInstance\r\n\t.addNewPath(...paths)\r\n\t.then( (message) => {\r\n\t\tconsole.log(message);\r\n\t\treturn libInstance.scan();\r\n\t})\r\n\t.then( (otherMessage) => {\r\n\t\tconsole.log(otherMessage);\r\n\t\tconsole.log(\"I found these movie(s) : \");\r\n\t\tsetTimeout(function(){\r\n\t\t\t// display the found movie(s)\r\n\t\t\tfor (let movie of libInstance.allMovies) {\r\n\t\t\t\tconsole.log(movie.title + ((movie.year) ? \" - \" + movie.year : \"\") + \" at \" + movie.filePath );\r\n\t\t\t}\r\n\t\t}, 1000);\r\n\t})\r\n\t.catch( (err) => {\r\n\t\tconsole.log(err.message);\r\n\t});\r\n```\r\n![foundMovies](asset/foundMovies.png)",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "D:\\workspaceNodeJs\\torrent-files-library\\manual\\examples\\listEachTvSerie.md",
    "name": "./manual/examples/listEachTvSerie.md",
    "content": "# List each found tv serie\r\n\r\n```js\r\nconst TorrentLibrary = require(\"torrent-files-library\");\r\n\r\nlet paths = [\r\n\t\"D:/DDL/FILMS\", // a path where I can find both movies and tv-series\r\n\t\"D:\\\\DDL\\\\SERIES TV\\\\Le juge et le pilote\" // a path where I can find episodes of a tv-serie\r\n];\r\n\r\n// create an instance\r\nlet libInstance = new TorrentLibrary();\r\n\r\n// add these paths inside this lib\r\nlibInstance\r\n\t.addNewPath(...paths)\r\n\t.then( (message) => {\r\n\t\tconsole.log(message);\r\n\t\treturn libInstance.scan();\r\n\t})\r\n\t.then( (otherMessage) => {\r\n\t\tconsole.log(otherMessage);\r\n\t\tconsole.log(\"I found these tv-series :\");\r\n\t\tlet mapSeries = libInstance.allTvSeries;\r\n\r\n\t\tfor (let [foundTvShow,episodeSet] of mapSeries.entries() ) {\r\n\t\t\tconsole.log(\"\\n\"+foundTvShow);\r\n\t\t\tconsole.log(\"\\t Total found episodes : \", episodeSet.size);\r\n\t\t\tlet foundSeasons = new Set([...episodeSet].map( episode => episode.season));\r\n\t\t\tconsole.log(\"\\t Found season(s) count : \", foundSeasons.size);\r\n\t\t\tfor (let seasonNumber of foundSeasons){\r\n\t\t\t\tconsole.log(\"\\t\\t Season %d\", seasonNumber);\r\n\t\t\t\tlet seasonEpisodes = [...episodeSet].filter(episode => episode.season === seasonNumber);\r\n\t\t\t\tconsole.log(\"\\t\\t\\t Season count : \" + seasonEpisodes.length);\r\n\t\t\t\tconsole.log(\"\\t\\t\\t Files : \");\r\n\t\t\t\tseasonEpisodes.forEach( episode => console.log(\"\\t\\t\\t \" + episode.filePath));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t})\r\n\t.catch( (err) => {\r\n\t\tconsole.log(err.message);\r\n\t});\r\n```\r\n\r\n![foundTvSeries](asset/foundTvSeries.png)",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "D:\\workspaceNodeJs\\torrent-files-library\\manual\\examples\\filterMoviesByParameters.md",
    "name": "./manual/examples/filterMoviesByParameters.md",
    "content": "# Filter movies by parameters\r\n\r\n```js\r\nconst TorrentLibrary = require(\"torrent-files-library\");\r\n\r\nlet paths = [\r\n\t\"D:/\",\r\n];\r\n\r\n// create an instance\r\nlet libInstance = new TorrentLibrary();\r\n\r\n// add these paths inside this lib\r\nlibInstance\r\n\t.addNewPath(...paths)\r\n\t.then( () => {\r\n\t\treturn libInstance.scan();\r\n\t})\r\n\t.then( () => {\r\n        console.log('Now time to search all remastered movies with year >= 2012 in one of following container avi/mp4');\r\n        let filteredSet = libInstance.filterMovies({\r\n          year: '>=2012',\r\n          remastered: true,\r\n          container: ['avi', 'mp4'],\r\n        });\r\n        for (let movie of filteredSet) {\r\n          console.log(`${movie.title + ((movie.year) ? ` - ${movie.year}` : '')} at ${movie.filePath}`);\r\n        }\r\n\t})\r\n\t.catch( (err) => {\r\n    \t\tconsole.log(err.message);\r\n    });\r\n```\r\n\r\n![filterMovies](asset/filterMovies.png)",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "D:\\workspaceNodeJs\\torrent-files-library\\manual\\examples\\filterTvSeriesByParameters.md",
    "name": "./manual/examples/filterTvSeriesByParameters.md",
    "content": "# Filter tv series by parameters\r\n\r\n```js\r\nconst TorrentLibrary = require(\"torrent-files-library\");\r\n\r\nlet paths = [\r\n    'D:/DDL/SERIES TV/Le juge et le pilote',\r\n    'D:/DDL/ANIME',\r\n];\r\n\r\n// create an instance\r\nlet libInstance = new TorrentLibrary();\r\n\r\n// add these paths inside this lib\r\nlibInstance\r\n    .addNewPath(...paths)\r\n    .then(() => libInstance.scan())\r\n    .then(() => {\r\n        console.log('Now time to search all episodes <=5 in season 1 of Hardcastle And McCormick / Assassination Classroom , in one of following container avi/mp4');\r\n        let filteredMap = libInstance.filterTvSeries({\r\n            title: ['Hardcastle And McCormick', 'Assassination Classroom'],\r\n            season: 1,\r\n            episode: '<=5',\r\n            container: ['avi', 'mp4'],\r\n        });\r\n        for (let [foundTvShow, episodeSet] of filteredMap.entries()) {\r\n            console.log(`\\n${foundTvShow}`);\r\n            console.log('\\t Total found episodes : ', episodeSet.size);\r\n            let foundSeasons = new Set([...episodeSet].map(episode => episode.season));\r\n            console.log('\\t Found season(s) count : ', foundSeasons.size);\r\n            for (let seasonNumber of foundSeasons) {\r\n                console.log('\\t\\t Season %d', seasonNumber);\r\n                let seasonEpisodes = [...episodeSet].filter(episode => episode.season === seasonNumber);\r\n                console.log(`\\t\\t\\t Season count : ${seasonEpisodes.length}`);\r\n                console.log('\\t\\t\\t Files : ');\r\n                seasonEpisodes.forEach(episode => console.log(`\\t\\t\\t ${episode.filePath}`));\r\n            }\r\n        }\r\n    })\r\n    .catch((err) => {\r\n        console.log(err.message);\r\n    });\r\n```\r\n\r\n![filterTvSeries](asset/filterTvSeries.png)",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "D:\\workspaceNodeJs\\torrent-files-library\\manual\\examples\\createPlaylist.md",
    "name": "./manual/examples/createPlaylist.md",
    "content": "# Create custom playlist(s)\r\n\r\n```js\r\nconst TorrentLibrary = require(\"torrent-files-library\");\r\nconst m3u = require('m3u'); // a basic playlist writer (in m3u format)\r\n\r\nlet paths = [\r\n    'D:/DDL/SERIES TV/Le juge et le pilote',\r\n    'D:/DDL/ANIME',\r\n];\r\n\r\n// create an instance\r\nlet libInstance = new TorrentLibrary();\r\n\r\n// add these paths inside this lib\r\nlibInstance\r\n    .addNewPath(...paths)\r\n    .then(() => libInstance.scan())\r\n    .then(() => {\r\n        console.log('Now time to search all episodes <=5 in season 1 of Hardcastle And McCormick / Assassination Classroom , in one of following container avi/mp4');\r\n        let filteredMap = libInstance.filterTvSeries({\r\n            title: ['Hardcastle And McCormick', 'Assassination Classroom'],\r\n            season: 1,\r\n            episode: '<=5',\r\n            container: ['avi', 'mp4'],\r\n        });\r\n        var writer = m3u.writer();\r\n        for (let [foundTvShow, episodeSet] of filteredMap.entries()) {\r\n            let foundSeasons = new Set([...episodeSet].map(episode => episode.season));\r\n            for (let seasonNumber of foundSeasons) {\r\n                writer.comment(`${foundTvShow} - Season ${seasonNumber}`);\r\n                let seasonEpisodes = [...episodeSet].filter(episode => episode.season === seasonNumber);\r\n                seasonEpisodes.forEach(episode => writer.file(`${episode.filePath}`));\r\n            }\r\n        }\r\n        let m3uAsString = writer.toString();\r\n        // save this result into a *.m3u file , using fs.writeFile or whatever you want to do that\r\n        // ...\r\n    })\r\n    .catch((err) => {\r\n        console.log(err.message);\r\n    });\r\n```\r\n\r\n```m3u\r\n# Assassination Classroom - Season 1\r\nD:\\DDL\\ANIME\\Assassination.Classroom.S01.FRENCH.720p.WEB-DL.x264-GODSPACE\\Assassination.Classroom.S01E01.FRENCH.720p.WEB-DL.x264-GODSPACE.mp4\r\nD:\\DDL\\ANIME\\Assassination.Classroom.S01.FRENCH.720p.WEB-DL.x264-GODSPACE\\Assassination.Classroom.S01E02.FRENCH.720p.WEB-DL.x264-GODSPACE.mp4\r\nD:\\DDL\\ANIME\\Assassination.Classroom.S01.FRENCH.720p.WEB-DL.x264-GODSPACE\\Assassination.Classroom.S01E03.FRENCH.720p.WEB-DL.x264-GODSPACE.mp4\r\nD:\\DDL\\ANIME\\Assassination.Classroom.S01.FRENCH.720p.WEB-DL.x264-GODSPACE\\Assassination.Classroom.S01E04.FRENCH.720p.WEB-DL.x264-GODSPACE.mp4\r\nD:\\DDL\\ANIME\\Assassination.Classroom.S01.FRENCH.720p.WEB-DL.x264-GODSPACE\\Assassination.Classroom.S01E05.FRENCH.720p.WEB-DL.x264-GODSPACE.mp4\r\n# Hardcastle And McCormick - Season 1\r\nD:\\DDL\\SERIES TV\\Le juge et le pilote\\Saison 1\\Hardcastle.And.McCormick.1x01.Le.Monstre.D_acier.avi\r\nD:\\DDL\\SERIES TV\\Le juge et le pilote\\Saison 1\\Hardcastle.And.McCormick.1x03.Le.Canard.De.Cristal.avi\r\nD:\\DDL\\SERIES TV\\Le juge et le pilote\\Saison 1\\Hardcastle.And.McCormick.1x04.Je.Ne.Sais.Pas.Ou.Je.Vais.Mais.J.y.Vais..avi\r\nD:\\DDL\\SERIES TV\\Le juge et le pilote\\Saison 1\\Hardcastle.And.McCormick.1x05.La.Veuve.Noire..avi\r\n```",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "D:\\workspaceNodeJs\\torrent-files-library\\CHANGELOG.md",
    "name": "./CHANGELOG.md",
    "content": "# Changelog\r\n\r\n<a name=\"1.4.0\"></a>\r\n## [1.4.0](https://github.com/jy95/torrent-files-library/compare/v1.3.0...v1.4.0) (2018-01-28)\r\n\r\n\r\n### Chore\r\n\r\n* Little quick fix for coverage ([1a6ba396c9f39ef0cb991d550c609d0c1994208d](https://github.com/jy95/torrent-files-library/commit/1a6ba396c9f39ef0cb991d550c609d0c1994208d))\r\n* Restore automatic release ([83d6417a271eb5b43d05a0262328435d371e2624](https://github.com/jy95/torrent-files-library/commit/83d6417a271eb5b43d05a0262328435d371e2624))\r\n\r\n### Docs\r\n\r\n* update CHANGELOG.md ([ab61d824a2dcaf8875e7b1b84a7fd76c866b1799](https://github.com/jy95/torrent-files-library/commit/ab61d824a2dcaf8875e7b1b84a7fd76c866b1799))\r\n\r\n### Feat\r\n\r\n* Provide a custom parsing function for the lib ([352cc87b682e0652dd5b98bfc975ea1406fc28b8](https://github.com/jy95/torrent-files-library/commit/352cc87b682e0652dd5b98bfc975ea1406fc28b8))\r\n\r\n### Perf\r\n\r\n* Use bind this for Bluebird promise to prevent dummy variable ([ba2da45a52d4f77e0622afd46e3fe4d86ff14d58](https://github.com/jy95/torrent-files-library/commit/ba2da45a52d4f77e0622afd46e3fe4d86ff14d58))\r\n\r\n<a name=\"1.3.0\"></a>\r\n## [1.3.0](https://github.com/jy95/torrent-files-library/compare/v1.2.4...v1.3.0) (2018-01-27)\r\n\r\n### Chore\r\n\r\n* Ava cannot transpile helpers yet ([02757f69ac990f2860906582c4e36f0596595168](https://github.com/jy95/torrent-files-library/commit/02757f69ac990f2860906582c4e36f0596595168))\r\n* npm update ([f543feb877aef286110313b806c0206c2673ef00](https://github.com/jy95/torrent-files-library/commit/f543feb877aef286110313b806c0206c2673ef00))\r\n* Remove automatic changelog ([72e2b5fdf16b6c3b7d411ee332144d66f9d09160](https://github.com/jy95/torrent-files-library/commit/72e2b5fdf16b6c3b7d411ee332144d66f9d09160))\r\n* remove jsdoc script ([098428e1a9792a95bcb561cabac39b38336c6458](https://github.com/jy95/torrent-files-library/commit/098428e1a9792a95bcb561cabac39b38336c6458))\r\n\r\n### Docs\r\n\r\n* Add missing docs for additionalProperties ([eca4eb4b9afaf4a794f8ebbb22002854ca7d58ae](https://github.com/jy95/torrent-files-library/commit/eca4eb4b9afaf4a794f8ebbb22002854ca7d58ae))\r\n* Add missing docs for functions ([e60f576f989ed3192e7d6042b6ec7c12455050fa](https://github.com/jy95/torrent-files-library/commit/e60f576f989ed3192e7d6042b6ec7c12455050fa))\r\n* Docs completely rewritten for ESdoc ([583c007450c03269650f1fdbb76035584d217df3](https://github.com/jy95/torrent-files-library/commit/583c007450c03269650f1fdbb76035584d217df3))\r\n* Readme and examples ([bcd257f329671cc1989715a813aa477eca9143ab](https://github.com/jy95/torrent-files-library/commit/bcd257f329671cc1989715a813aa477eca9143ab))\r\n* WIP: Docs rewritten in ESDOC ([8d502d88886e6e6652328cca1a8c8317e4cc44ce](https://github.com/jy95/torrent-files-library/commit/8d502d88886e6e6652328cca1a8c8317e4cc44ce))\r\n\r\n### Feat\r\n\r\n* filterMovies ([c6cb3f52593c5516fffcd604c958243fb766bb26](https://github.com/jy95/torrent-files-library/commit/c6cb3f52593c5516fffcd604c958243fb766bb26))\r\n\r\n### Fix\r\n\r\n* Eval and = symbol in filterNumberProperty ([84695f10a39d4c52586e1e7c2433e73617adca00](https://github.com/jy95/torrent-files-library/commit/84695f10a39d4c52586e1e7c2433e73617adca00))\r\n* Fix founds bugs in filterMovies ([09e00ad584bb19bbcf39911f43745eabefa9075a](https://github.com/jy95/torrent-files-library/commit/09e00ad584bb19bbcf39911f43745eabefa9075a))\r\n\r\n### Test\r\n\r\n* Add unit tests for filterMovies ([42d3b94ff8b26d732f95e2a98ac0840f52c85202](https://github.com/jy95/torrent-files-library/commit/42d3b94ff8b26d732f95e2a98ac0840f52c85202))\r\n* Make expectedJson more generic ([f0465f0b0ee31614a5959160cce2aeb552226c88](https://github.com/jy95/torrent-files-library/commit/f0465f0b0ee31614a5959160cce2aeb552226c88))\r\n\r\n\r\n<a name=\"1.2.4\"></a>\r\n## [1.2.4](https://github.com/jy95/torrent-files-library/compare/v1.2.3...v1.2.4) (2018-01-21)\r\n\r\n\r\n### Fix\r\n\r\n* Fix automatic changelog config ([fa3c5ff3a15c160edc450835c2919a35722fb5fb](https://github.com/jy95/torrent-files-library/commit/fa3c5ff3a15c160edc450835c2919a35722fb5fb))\r\n\r\n<a name=\"1.2.3\"></a>\r\n## [1.2.3](https://github.com/jy95/torrent-files-library/compare/v1.2.2...v1.2.3) (2018-01-21)\r\n\r\n\r\n### Chore\r\n\r\n* Remove osx build on travis CI (too slow) ([0be825b82d2101b288f45800b889696ea9aef808](https://github.com/jy95/torrent-files-library/commit/0be825b82d2101b288f45800b889696ea9aef808))\r\n* Update dependancies ([bf7971527d40dd5c53c6713b365e89daf2d61084](https://github.com/jy95/torrent-files-library/commit/bf7971527d40dd5c53c6713b365e89daf2d61084))\r\n* Update dependancies to fix security issues of marked ([59060d89f8598edee730fa16c6f636e6f1e25c04](https://github.com/jy95/torrent-files-library/commit/59060d89f8598edee730fa16c6f636e6f1e25c04))\r\n* Update semantic-release preset regex ([e2b839e4b02cfc7c97f6aea2444141f049162172](https://github.com/jy95/torrent-files-library/commit/e2b839e4b02cfc7c97f6aea2444141f049162172))\r\n\r\n### Docs\r\n\r\n* Add automatic changelog.md ([6ff3328347f021b205fb4a5676ba4661b4eb3256](https://github.com/jy95/torrent-files-library/commit/6ff3328347f021b205fb4a5676ba4661b4eb3256))\r\n\r\n### Perf\r\n\r\n* Remove comments from lib version ([e54318a617b7cda1ce7d8be15d86482ba9d1aa18](https://github.com/jy95/torrent-files-library/commit/e54318a617b7cda1ce7d8be15d86482ba9d1aa18))\r\n\r\n### Style\r\n\r\n* Add the emoji to github ([b993c360d374272fbdc189b438c2fe2fcfc0f9e6](https://github.com/jy95/torrent-files-library/commit/b993c360d374272fbdc189b438c2fe2fcfc0f9e6))\r\n\r\n### Test\r\n\r\n* Drop mocha unit tests ([b0897b360f3d304dbb1090ddf2bfa5c75b6049c4](https://github.com/jy95/torrent-files-library/commit/b0897b360f3d304dbb1090ddf2bfa5c75b6049c4))\r\n* Fix code coverage ([270a8b77f35486498da9b318d5091f8fed2c085f](https://github.com/jy95/torrent-files-library/commit/270a8b77f35486498da9b318d5091f8fed2c085f))\r\n\r\n<a name=\"1.2.2\"></a>\r\n## [1.2.2](https://github.com/jy95/torrent-files-library/compare/v1.2.1...v1.2.2) (2017-12-23)\r\n\r\n\r\n### Chore\r\n\r\n* Breaking change of semantic-release ([55af47fbd75387b090aa07e0d6fc67c57994ac75](https://github.com/jy95/torrent-files-library/commit/55af47fbd75387b090aa07e0d6fc67c57994ac75)), closes [/github.com/semantic-release/semantic-release/issues/572#issuecomment-353631426](https://github.com//github.com/semantic-release/semantic-release/issues/572/issues/issuecomment-353631426)\r\n* Make cleaning stuff ([6ca25601f7d348ae4022a3f79d6936b098254980](https://github.com/jy95/torrent-files-library/commit/6ca25601f7d348ae4022a3f79d6936b098254980))\r\n* Mocha V4 - compilers deprecation ([55378fadbff964b8d4fc6b5559cffef424c132b0](https://github.com/jy95/torrent-files-library/commit/55378fadbff964b8d4fc6b5559cffef424c132b0))\r\n* Update lock file ([5ec79c595ae1816c353a1da1f5a16220a9aca527](https://github.com/jy95/torrent-files-library/commit/5ec79c595ae1816c353a1da1f5a16220a9aca527))\r\n* Use semantic-release plugins only ([e61c88efc6107cbf865b3e4851a0ef6cdd00a55e](https://github.com/jy95/torrent-files-library/commit/e61c88efc6107cbf865b3e4851a0ef6cdd00a55e))\r\n\r\n### CI\r\n\r\n* Added Greenkeeper lockfile ([f86ac271b3884832094092b524b4ca832cc6d112](https://github.com/jy95/torrent-files-library/commit/f86ac271b3884832094092b524b4ca832cc6d112))\r\n\r\n### Refactor\r\n\r\n* Remove emoji for sgcrc ([4d8a6237d697a054c1828a56948c6eabf93c5689](https://github.com/jy95/torrent-files-library/commit/4d8a6237d697a054c1828a56948c6eabf93c5689))\r\n\r\n<a name=\"1.2.1\"></a>\r\n## [1.2.1](https://github.com/jy95/torrent-files-library/compare/v1.2.0...v1.2.1) (2017-09-10)\r\n\r\n\r\n### Fix\r\n\r\n* wrong boolean for hasPathsProvidedByUser ([c8c5fa1985dd206499bd8e5af08b043290b93299](https://github.com/jy95/torrent-files-library/commit/c8c5fa1985dd206499bd8e5af08b043290b93299))\r\n\r\n<a name=\"1.2.0\"></a>\r\n## [1.2.0](https://github.com/jy95/torrent-files-library/compare/v1.1.0...v1.2.0) (2017-09-08)\r\n\r\n\r\n### Feat\r\n\r\n* createFromJSON - create an instance with toJSON ([a69fcee4b234b12de5229d14819ebff43fab996a](https://github.com/jy95/torrent-files-library/commit/a69fcee4b234b12de5229d14819ebff43fab996a))\r\n\r\n### Style\r\n\r\n* Fix babel syntax for coverage ([2a8eadf0323755c1fa7bdcdacb057a0de7c3e381](https://github.com/jy95/torrent-files-library/commit/2a8eadf0323755c1fa7bdcdacb057a0de7c3e381))\r\n\r\n### Test\r\n\r\n* Add missing tests for events ([0047fca9efd76bd51580128926c1c6bd7a412c73](https://github.com/jy95/torrent-files-library/commit/0047fca9efd76bd51580128926c1c6bd7a412c73))\r\n\r\n<a name=\"1.1.0\"></a>\r\n## [1.1.0](https://github.com/jy95/torrent-files-library/compare/v1.0.4...v1.1.0) (2017-09-08)\r\n\r\n\r\n### Chore\r\n\r\n* change event error to error_in_function ([cd689f4ea4c7c8dd6afd84251259c256471f0477](https://github.com/jy95/torrent-files-library/commit/cd689f4ea4c7c8dd6afd84251259c256471f0477))\r\n* remove sinonjs ([9118a7c7bfeac2dc1cd11f0b28e483b777ed5fb4](https://github.com/jy95/torrent-files-library/commit/9118a7c7bfeac2dc1cd11f0b28e483b777ed5fb4))\r\n\r\n### Docs\r\n\r\n* explain default params value in constructor ([1be4e825ea75506cab0903a5b7c87bd4dbac4896](https://github.com/jy95/torrent-files-library/commit/1be4e825ea75506cab0903a5b7c87bd4dbac4896))\r\n* separate jsdoc into another files ([cb29a027a0acdc941d5f8ab35da636ac9b34ffed](https://github.com/jy95/torrent-files-library/commit/cb29a027a0acdc941d5f8ab35da636ac9b34ffed))\r\n\r\n### Feat\r\n\r\n* Support events listeners ([9461036818649b2e85dc0b8068ac926b33a3c617](https://github.com/jy95/torrent-files-library/commit/9461036818649b2e85dc0b8068ac926b33a3c617))\r\n\r\n### Style\r\n\r\n* Trying to fix unhandeld promise ([2f7a487a33dbe07eac47d176c3771c3dc7c89ce4](https://github.com/jy95/torrent-files-library/commit/2f7a487a33dbe07eac47d176c3771c3dc7c89ce4))\r\n\r\n### Test\r\n\r\n* Added tests for events  ([78c9fe3bceac9474fd1d77641802b65c2768fbe0](https://github.com/jy95/torrent-files-library/commit/78c9fe3bceac9474fd1d77641802b65c2768fbe0))\r\n\r\n<a name=\"1.0.4\"></a>\r\n## [1.0.4](https://github.com/jy95/torrent-files-library/compare/v1.0.3...v1.0.4) (2017-09-06)\r\n\r\n\r\n### Chore\r\n\r\n* Correct the wrong property for releaseRules ([b2f17c402bf8a2451a3b32ab06259e5bc162ba58](https://github.com/jy95/torrent-files-library/commit/b2f17c402bf8a2451a3b32ab06259e5bc162ba58))\r\n\r\n### Docs\r\n\r\n* change example in readme.md ([a5a7e23836e7f165248d0c0d668256c623633d75](https://github.com/jy95/torrent-files-library/commit/a5a7e23836e7f165248d0c0d668256c623633d75))\r\n* fix filemapping png file mess up ([94337e1dcff8702aa59f9121528ef89fc5ce23b1](https://github.com/jy95/torrent-files-library/commit/94337e1dcff8702aa59f9121528ef89fc5ce23b1))\r\n* Fix png files mess up ([faf9c7acd8af0841fe7c152a53843be65723d710](https://github.com/jy95/torrent-files-library/commit/faf9c7acd8af0841fe7c152a53843be65723d710))\r\n* replace gif by png ([0d08dab62159d48d8c0d4dec014d21323171b8af](https://github.com/jy95/torrent-files-library/commit/0d08dab62159d48d8c0d4dec014d21323171b8af))\r\n\r\n### Perf\r\n\r\n* overload constructor ([9e091c31f4228e170004d966219b5a3e50817ba4](https://github.com/jy95/torrent-files-library/commit/9e091c31f4228e170004d966219b5a3e50817ba4))\r\n\r\n### Test\r\n\r\n* Fix coverage default params missed ([088e1a94b5cd2fc955f7cea527f4fd2a7bb30fb9](https://github.com/jy95/torrent-files-library/commit/088e1a94b5cd2fc955f7cea527f4fd2a7bb30fb9))\r\n\r\n<a name=\"1.0.3\"></a>\r\n## [1.0.3](https://github.com/jy95/torrent-files-library/compare/v1.0.2...v1.0.3) (2017-09-03)\r\n\r\n\r\n### Docs\r\n\r\n* Add an new example ([a9d0084b732f4d7ceb0abb6626e41f16f904902d](https://github.com/jy95/torrent-files-library/commit/a9d0084b732f4d7ceb0abb6626e41f16f904902d))\r\n* create CODE_OF_CONDUCT.md ([56b88c6089ffabcafb78287b540127ba324c4d32](https://github.com/jy95/torrent-files-library/commit/56b88c6089ffabcafb78287b540127ba324c4d32))\r\n* updated docs ([afef9f743d25f1dd8b6b283152e492de09c3e25a](https://github.com/jy95/torrent-files-library/commit/afef9f743d25f1dd8b6b283152e492de09c3e25a))\r\n* updated docs ([25edc16bc41070c21faa8ca1ad70b5abee1e35ae](https://github.com/jy95/torrent-files-library/commit/25edc16bc41070c21faa8ca1ad70b5abee1e35ae))\r\n* Updated docs ([3cb9b519ea3b2a73eea92952baea98244d3fad37](https://github.com/jy95/torrent-files-library/commit/3cb9b519ea3b2a73eea92952baea98244d3fad37))\r\n\r\n### Feat\r\n\r\n* initial removeOldFiles method implementation ([a5d21f84110e215da086718060a2b42e91521f45](https://github.com/jy95/torrent-files-library/commit/a5d21f84110e215da086718060a2b42e91521f45))\r\n* toJSON() custom implementation ([ca7a0cadbda175f39a0fa4386b5728ca38c50647](https://github.com/jy95/torrent-files-library/commit/ca7a0cadbda175f39a0fa4386b5728ca38c50647))\r\n\r\n### Fix\r\n\r\n* Correct getters that uses reference instead of values ([064d79edcc0a7619a1cb8d68c7d6e0433834ddab](https://github.com/jy95/torrent-files-library/commit/064d79edcc0a7619a1cb8d68c7d6e0433834ddab))\r\n* make JSON test cross platform ([e8dd44b8264a399255b7f3fcecfc94a976f3e5c0](https://github.com/jy95/torrent-files-library/commit/e8dd44b8264a399255b7f3fcecfc94a976f3e5c0))\r\n\r\n### Perf\r\n\r\n* modified releaseRules for release ([3a775c071ea57021bbcfca7587351349895c0d52](https://github.com/jy95/torrent-files-library/commit/3a775c071ea57021bbcfca7587351349895c0d52))\r\n* promisify addNewFiles ([ffdf72a28941abedfc186f6cf5e6fb09ee83621d](https://github.com/jy95/torrent-files-library/commit/ffdf72a28941abedfc186f6cf5e6fb09ee83621d))\r\n* Replace torrent name parser lib by an new one ([5c428a003acb81987b35841af78d5012f6a5c8bd](https://github.com/jy95/torrent-files-library/commit/5c428a003acb81987b35841af78d5012f6a5c8bd))\r\n\r\n### Refactor\r\n\r\n* Add keywords to package.json and code style for docs ([b9714f33e9d264d733b3ad3662fa09126afbe441](https://github.com/jy95/torrent-files-library/commit/b9714f33e9d264d733b3ad3662fa09126afbe441))\r\n* Make removeOldFiles method public ([8887d71938abe1b61fe74ec1ff4743b88e7b9446](https://github.com/jy95/torrent-files-library/commit/8887d71938abe1b61fe74ec1ff4743b88e7b9446))\r\n* Rewrited test code ([a252b833471e41086d2258acafb63e2fef794325](https://github.com/jy95/torrent-files-library/commit/a252b833471e41086d2258acafb63e2fef794325))\r\n\r\n### Test\r\n\r\n* Add tests for removeOldFiles ([0b1edebffe7c18251ddd5cd6e148bc07233fc8f5](https://github.com/jy95/torrent-files-library/commit/0b1edebffe7c18251ddd5cd6e148bc07233fc8f5))\r\n* Correct tests that uses reference instead of values ([49a2a1d053480a19d31926893b3f314d17c95a76](https://github.com/jy95/torrent-files-library/commit/49a2a1d053480a19d31926893b3f314d17c95a76))\r\n\r\n<a name=\"1.0.2\"></a>\r\n## [1.0.2](https://github.com/jy95/torrent-files-library/compare/v1.0.1...v1.0.2) (2017-08-30)\r\n\r\n\r\n### Docs\r\n\r\n* Make docs great ([b30d60e385b45dbb6396cc19dab2f4366df9bb39](https://github.com/jy95/torrent-files-library/commit/b30d60e385b45dbb6396cc19dab2f4366df9bb39))\r\n\r\n### Fix\r\n\r\n* Bug (this.timeout) due to rewrited test code ([46713737549820edde50657e5523c4099bf44478](https://github.com/jy95/torrent-files-library/commit/46713737549820edde50657e5523c4099bf44478))\r\n\r\n### Refactor\r\n\r\n* Rewrited code to match ESLint rules ([deb0d85d2ab31337f1d4561612f0753609acdad6](https://github.com/jy95/torrent-files-library/commit/deb0d85d2ab31337f1d4561612f0753609acdad6))\r\n* Rewrited tests code to match ESLint rules ([39cc30c856358fa918346b199e2bfc4dd5bc0899](https://github.com/jy95/torrent-files-library/commit/39cc30c856358fa918346b199e2bfc4dd5bc0899))\r\n\r\n<a name=\"1.0.1\"></a>\r\n## [1.0.1](https://github.com/jy95/torrent-files-library/compare/v1.0.0...v1.0.1) (2017-08-29)\r\n\r\n\r\n### Fix\r\n\r\n* Changelog missing at release ([1f06fdb24009aba9da1f52e77057265b9ef5c9ee](https://github.com/jy95/torrent-files-library/commit/1f06fdb24009aba9da1f52e77057265b9ef5c9ee))\r\n\r\n<a name=\"1.0.0\"></a>\r\n## 1.0.0 (2017-08-29)\r\n\r\n### CI\r\n\r\n* Fix missing coverage ([ac3f3612c3e087f01435247056561c048c02f419](https://github.com/jy95/torrent-files-library/commit/ac3f3612c3e087f01435247056561c048c02f419))\r\n* Fix out of date NPM version used by travis CI ([33408730e5303035a8949f7f469faddd1c72ef96](https://github.com/jy95/torrent-files-library/commit/33408730e5303035a8949f7f469faddd1c72ef96))\r\n* Replace Travis build Node.Js 4 for latest Node.Js release ([747a9e5d50376b6740635181bbe05ff45cb97bb8](https://github.com/jy95/torrent-files-library/commit/747a9e5d50376b6740635181bbe05ff45cb97bb8))\r\n* Set engines in package.json + readd job for Node.Js 6 ([2f60592e058edec2d17d051babc762dd3284496e](https://github.com/jy95/torrent-files-library/commit/2f60592e058edec2d17d051babc762dd3284496e))\r\n* Trying to set CI for semantic-release ([e4403e5409b46ad585f91558c6e952e308e3172f](https://github.com/jy95/torrent-files-library/commit/e4403e5409b46ad585f91558c6e952e308e3172f))\r\n\r\n### Docs\r\n\r\n* add example : how to use it ? ([49b9d53d7cbd9e947f876b4c74ea9630a6a38bfc](https://github.com/jy95/torrent-files-library/commit/49b9d53d7cbd9e947f876b4c74ea9630a6a38bfc))\r\n* Add JSDoc documentation ([a2853159762783914cf069d8e74856302353b427](https://github.com/jy95/torrent-files-library/commit/a2853159762783914cf069d8e74856302353b427))\r\n* Explain how this lib will handle analysis ([0b94dbe6f512b82a0bd1fd39ba42f5e450fd9819](https://github.com/jy95/torrent-files-library/commit/0b94dbe6f512b82a0bd1fd39ba42f5e450fd9819))\r\n* Improve Documentation ([5a429318fedbbf723020936b63547b7f648c46e5](https://github.com/jy95/torrent-files-library/commit/5a429318fedbbf723020936b63547b7f648c46e5))\r\n* Include an gif example for library ([131711cdf617ff5aeed1ad67f176dbc0c9fb0275](https://github.com/jy95/torrent-files-library/commit/131711cdf617ff5aeed1ad67f176dbc0c9fb0275))\r\n* Updated demo gifs ([556ccfdd817ad5415a7c57ac8fa92072a858a61f](https://github.com/jy95/torrent-files-library/commit/556ccfdd817ad5415a7c57ac8fa92072a858a61f))\r\n\r\n### Feat\r\n\r\n* Scan Implemented ([46ebf9376ae5823622784734f75cd2d133a9a25b](https://github.com/jy95/torrent-files-library/commit/46ebf9376ae5823622784734f75cd2d133a9a25b))\r\n* use normalize method from path (node) for paths ([d3f9baffbbc546e58dcdc3d5efe6952874bc48e7](https://github.com/jy95/torrent-files-library/commit/d3f9baffbbc546e58dcdc3d5efe6952874bc48e7))\r\n\r\n### Fix\r\n\r\n* .gitgnore mess up with lib folder ([da30f778a9d8ae936327e49b78b229214eb32d55](https://github.com/jy95/torrent-files-library/commit/da30f778a9d8ae936327e49b78b229214eb32d55))\r\n* Fix Mocha bug with multiple jobs ([318fab20f72dee0c3d899486c89d1fa36e7ec31f](https://github.com/jy95/torrent-files-library/commit/318fab20f72dee0c3d899486c89d1fa36e7ec31f))\r\n* Fix promisified access ([c5d2cbf2413f7d2b53e47bafe2d17f211e6c22b0](https://github.com/jy95/torrent-files-library/commit/c5d2cbf2413f7d2b53e47bafe2d17f211e6c22b0))\r\n* prepublish => prepare in NPM5 ([80c2633ec6623d0f26971a1b83ce08202b3ea2d0](https://github.com/jy95/torrent-files-library/commit/80c2633ec6623d0f26971a1b83ce08202b3ea2d0))\r\n\r\n### Test\r\n\r\n* Add first test ([5e89b605c571a3c4c7d227afbb325858aa6198c8](https://github.com/jy95/torrent-files-library/commit/5e89b605c571a3c4c7d227afbb325858aa6198c8))\r\n* Add missing test for scan ([a189a47ae6564b197d261a584d0dbbaad2965192](https://github.com/jy95/torrent-files-library/commit/a189a47ae6564b197d261a584d0dbbaad2965192))\r\n* Add sub tests for scan() method ([36ed79a08d9f79e89869ed8ee603060edfff2878](https://github.com/jy95/torrent-files-library/commit/36ed79a08d9f79e89869ed8ee603060edfff2878))\r\n",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 112,
    "kind": "testFile",
    "name": "test/getters/allFilesWithCategory.js",
    "content": "import test from 'ava';\r\nimport TorrentLibrary from '../../index';\r\nimport { files, folders } from '../_constants';\r\n\r\n\r\n// TESTS\r\n/** @test {TorrentLibrary#allFilesWithCategory} */\r\ntest('Should correctly detect the category of each file', async (t) => {\r\n  let libInstance = new TorrentLibrary();\r\n  await t.notThrows(libInstance.addNewPath(...folders));\r\n  await t.notThrows(libInstance.scan());\r\n  t.deepEqual(\r\n    new Map([\r\n      [files[2], TorrentLibrary.MOVIES_TYPE],\r\n      [files[0], TorrentLibrary.TV_SERIES_TYPE],\r\n      [files[1], TorrentLibrary.TV_SERIES_TYPE],\r\n    ]),\r\n    libInstance.allFilesWithCategory,\r\n    'Not the same',\r\n  );\r\n});\r\n",
    "static": true,
    "longname": "D:/workspaceNodeJs/torrent-files-library/test/getters/allFilesWithCategory.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 113,
    "kind": "test",
    "name": "test0",
    "testId": 0,
    "memberof": "test/getters/allFilesWithCategory.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/getters/allFilesWithCategory.js~test0",
    "access": null,
    "description": "Should correctly detect the category of each file",
    "lineNumber": 8,
    "testTargets": [
      "TorrentLibrary#allFilesWithCategory"
    ]
  },
  {
    "__docId__": 114,
    "kind": "testFile",
    "name": "test/getters/allMovies.js",
    "content": "import test from 'ava';\r\nimport path from 'path';\r\nimport { parse as nameParser } from 'parse-torrent-title';\r\nimport TorrentLibrary from '../../index';\r\nimport { files, folders } from '../_constants';\r\n\r\n// TESTS\r\n/** @test {TorrentLibrary#allMovies} */\r\ntest('Returns the movies', async (t) => {\r\n  let libInstance = new TorrentLibrary();\r\n  await t.notThrows(libInstance.addNewPath(...folders));\r\n  await t.notThrows(libInstance.scan());\r\n  t.deepEqual(\r\n    new Set([\r\n      Object.assign(\r\n        nameParser(path.basename(files[2])),\r\n        { filePath: files[2] },\r\n      ),\r\n    ]),\r\n    libInstance.allMovies,\r\n    'Not the same',\r\n  );\r\n});\r\n\r\n",
    "static": true,
    "longname": "D:/workspaceNodeJs/torrent-files-library/test/getters/allMovies.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "test",
    "name": "test1",
    "testId": 1,
    "memberof": "test/getters/allMovies.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/getters/allMovies.js~test1",
    "access": null,
    "description": "Returns the movies",
    "lineNumber": 9,
    "testTargets": [
      "TorrentLibrary#allMovies"
    ]
  },
  {
    "__docId__": 116,
    "kind": "testFile",
    "name": "test/getters/allTvSeries.js",
    "content": "import test from 'ava';\r\nimport path from 'path';\r\nimport { parse as nameParser } from 'parse-torrent-title';\r\nimport TorrentLibrary from '../../index';\r\nimport { files, folders } from '../_constants';\r\n\r\n// TESTS\r\n/** @test {TorrentLibrary#allTvSeries} */\r\ntest('Returns the tv-shows', async (t) => {\r\n  let libInstance = new TorrentLibrary();\r\n  await t.notThrows(libInstance.addNewPath(...folders));\r\n  await t.notThrows(libInstance.scan());\r\n  t.deepEqual(\r\n    new Map([\r\n      [nameParser(path.basename(files[0])).title, new Set([\r\n        Object.assign(\r\n          nameParser(path.basename(files[0])),\r\n          { filePath: files[0] },\r\n        ),\r\n        Object.assign(\r\n          nameParser(path.basename(files[1])),\r\n          { filePath: files[1] },\r\n        ),\r\n      ])],\r\n    ]),\r\n    libInstance.allTvSeries,\r\n    'Not the same',\r\n  );\r\n});\r\n\r\n",
    "static": true,
    "longname": "D:/workspaceNodeJs/torrent-files-library/test/getters/allTvSeries.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "test",
    "name": "test2",
    "testId": 2,
    "memberof": "test/getters/allTvSeries.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/getters/allTvSeries.js~test2",
    "access": null,
    "description": "Returns the tv-shows",
    "lineNumber": 9,
    "testTargets": [
      "TorrentLibrary#allTvSeries"
    ]
  },
  {
    "__docId__": 118,
    "kind": "testFile",
    "name": "test/getters/constants.js",
    "content": "import test from 'ava';\r\nimport videosExtension from 'video-extensions';\r\nimport TorrentLibrary from '../../index';\r\n\r\n/** @test {TorrentLibrary.MOVIES_TYPE} */\r\ntest('Constant MOVIES_TYPE', (t) => {\r\n  t.is(\r\n    TorrentLibrary.MOVIES_TYPE,\r\n    'MOVIES',\r\n    'Someone changed this constant value !',\r\n  );\r\n});\r\n\r\n/** @test {TorrentLibrary.TV_SERIES_TYPE} */\r\ntest('Constant TV_SERIES', (t) => {\r\n  t.is(\r\n    TorrentLibrary.TV_SERIES_TYPE,\r\n    'TV_SERIES',\r\n    'Someone changed this constant value !',\r\n  );\r\n});\r\n\r\n/** @test {TorrentLibrary.listVideosExtension} */\r\ntest('List of videos extension', (t) => {\r\n  t.is(\r\n    TorrentLibrary.listVideosExtension(),\r\n    videosExtension,\r\n    'Someone changed this constant value !',\r\n  );\r\n});\r\n",
    "static": true,
    "longname": "D:/workspaceNodeJs/torrent-files-library/test/getters/constants.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "test",
    "name": "test3",
    "testId": 3,
    "memberof": "test/getters/constants.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/getters/constants.js~test3",
    "access": null,
    "description": "Constant MOVIES_TYPE",
    "lineNumber": 6,
    "testTargets": [
      "TorrentLibrary.MOVIES_TYPE"
    ]
  },
  {
    "__docId__": 120,
    "kind": "test",
    "name": "test4",
    "testId": 4,
    "memberof": "test/getters/constants.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/getters/constants.js~test4",
    "access": null,
    "description": "Constant TV_SERIES",
    "lineNumber": 15,
    "testTargets": [
      "TorrentLibrary.TV_SERIES_TYPE"
    ]
  },
  {
    "__docId__": 121,
    "kind": "test",
    "name": "test5",
    "testId": 5,
    "memberof": "test/getters/constants.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/getters/constants.js~test5",
    "access": null,
    "description": "List of videos extension",
    "lineNumber": 24,
    "testTargets": [
      "TorrentLibrary.listVideosExtension"
    ]
  },
  {
    "__docId__": 122,
    "kind": "testFile",
    "name": "test/methods/addNewPath.js",
    "content": "import test from 'ava';\r\nimport path from 'path';\r\nimport * as sinon from 'sinon';\r\nimport TorrentLibrary from '../../index';\r\nimport { folders } from '../_constants';\r\n\r\n// TESTS\r\n/** @test {TorrentLibrary#addNewPath} */\r\ntest('missing parameter', async (t) => {\r\n  let eventSpy = sinon.spy();\r\n  let libInstance = new TorrentLibrary();\r\n  libInstance.on('missing_parameter', eventSpy);\r\n  await t.throws(libInstance.addNewPath());\r\n  t.truthy(eventSpy.called, 'Event did not fire.');\r\n  t.truthy(eventSpy.calledOnce, 'Event fired more than once');\r\n  t.is(\r\n    libInstance.hasPathsProvidedByUser(),\r\n    false, 'No paths by user should be added',\r\n  );\r\n});\r\n\r\n/** @test {TorrentLibrary#addNewPath} */\r\ntest('Not an existent path', async (t) => {\r\n  let eventSpy = sinon.spy();\r\n  let libInstance = new TorrentLibrary();\r\n\r\n  libInstance.on('error_in_function', eventSpy);\r\n  await t.throws(libInstance.addNewPath(path.join(__dirname, 'wrongPath')));\r\n  t.truthy(eventSpy.called, 'Event did not fire.');\r\n  t.truthy(eventSpy.calledOnce, 'Event fired more than once');\r\n  t.is(\r\n    libInstance.hasPathsProvidedByUser(),\r\n    false, 'No paths by user should be added',\r\n  );\r\n});\r\n\r\n/** @test {TorrentLibrary#addNewPath} */\r\ntest('existent paths', async (t) => {\r\n  let eventSpy = sinon.spy();\r\n  let libInstance = new TorrentLibrary();\r\n  libInstance.on('addNewPath', eventSpy);\r\n  await t.notThrows(libInstance.addNewPath(...folders));\r\n  t.truthy(eventSpy.called, 'Event did not fire.');\r\n  t.truthy(eventSpy.calledOnce, 'Event fired more than once');\r\n  t.is(\r\n    libInstance.hasPathsProvidedByUser(),\r\n    true, 'The path should be added',\r\n  );\r\n});\r\n\r\n",
    "static": true,
    "longname": "D:/workspaceNodeJs/torrent-files-library/test/methods/addNewPath.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 123,
    "kind": "test",
    "name": "test6",
    "testId": 6,
    "memberof": "test/methods/addNewPath.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/methods/addNewPath.js~test6",
    "access": null,
    "description": "missing parameter",
    "lineNumber": 9,
    "testTargets": [
      "TorrentLibrary#addNewPath"
    ]
  },
  {
    "__docId__": 124,
    "kind": "test",
    "name": "test7",
    "testId": 7,
    "memberof": "test/methods/addNewPath.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/methods/addNewPath.js~test7",
    "access": null,
    "description": "Not an existent path",
    "lineNumber": 23,
    "testTargets": [
      "TorrentLibrary#addNewPath"
    ]
  },
  {
    "__docId__": 125,
    "kind": "test",
    "name": "test8",
    "testId": 8,
    "memberof": "test/methods/addNewPath.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/methods/addNewPath.js~test8",
    "access": null,
    "description": "existent paths",
    "lineNumber": 38,
    "testTargets": [
      "TorrentLibrary#addNewPath"
    ]
  },
  {
    "__docId__": 126,
    "kind": "testFile",
    "name": "test/methods/createFromJSON.js",
    "content": "import test from 'ava';\r\nimport TorrentLibrary from '../../index';\r\nimport { folders } from '../_constants';\r\n\r\n/** @test {TorrentLibrary.createFromJSON} */\r\ntest('create a perfect copy of instance', async (t) => {\r\n  let libInstance = new TorrentLibrary();\r\n  await t.notThrows(libInstance.addNewPath(...folders));\r\n  await t.notThrows(libInstance.scan());\r\n  const jsonFromLib = JSON.parse(libInstance.toJSON());\r\n  const createdInstance = TorrentLibrary.createFromJSON(jsonFromLib);\r\n  t.deepEqual(\r\n    createdInstance.allFilesWithCategory,\r\n    libInstance.allFilesWithCategory,\r\n    'allFilesWithCategory different',\r\n  );\r\n  t.deepEqual(\r\n    createdInstance.allMovies,\r\n    libInstance.allMovies, 'allMovies different',\r\n  );\r\n  t.deepEqual(\r\n    createdInstance.allTvSeries,\r\n    libInstance.allTvSeries, 'allTvSeries different',\r\n  );\r\n});\r\n\r\n// dummy test for ES6 code coverage\r\n/** @test {TorrentLibrary.createFromJSON} */\r\ntest('empty instance(s)', async (t) => {\r\n  TorrentLibrary.createFromJSON({});\r\n  t.pass();\r\n});\r\n",
    "static": true,
    "longname": "D:/workspaceNodeJs/torrent-files-library/test/methods/createFromJSON.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 127,
    "kind": "test",
    "name": "test9",
    "testId": 9,
    "memberof": "test/methods/createFromJSON.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/methods/createFromJSON.js~test9",
    "access": null,
    "description": "create a perfect copy of instance",
    "lineNumber": 6,
    "testTargets": [
      "TorrentLibrary.createFromJSON"
    ]
  },
  {
    "__docId__": 128,
    "kind": "test",
    "name": "test10",
    "testId": 10,
    "memberof": "test/methods/createFromJSON.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/methods/createFromJSON.js~test10",
    "access": null,
    "description": "empty instance(s)",
    "lineNumber": 29,
    "testTargets": [
      "TorrentLibrary.createFromJSON"
    ]
  },
  {
    "__docId__": 129,
    "kind": "testFile",
    "name": "test/methods/filterMovies.js",
    "content": "import test from 'ava';\r\nimport * as sinon from 'sinon';\r\nimport { parse as nameParser } from 'parse-torrent-title';\r\nimport path from 'path';\r\nimport TorrentLibrary from '../../index';\r\nimport { files, folders } from '../_constants';\r\n\r\n/** @test {TorrentLibrary#filterMovies} */\r\ntest('Should work without parameters', async (t) => {\r\n  let eventSpy = sinon.spy();\r\n  let libInstance = new TorrentLibrary();\r\n  libInstance.on('scan', eventSpy);\r\n  // whatever path that should exists\r\n  await t.notThrows(libInstance.addNewPath(...folders));\r\n  await t.notThrows(libInstance.scan());\r\n  t.truthy(eventSpy.called, 'Event did not fire.');\r\n  t.truthy(eventSpy.calledOnce, 'Event fired more than once');\r\n  t.deepEqual(\r\n    new Set([\r\n      Object.assign(\r\n        nameParser(path.basename(files[2])),\r\n        { filePath: files[2] },\r\n      ),\r\n    ]),\r\n    libInstance.filterMovies(),\r\n    'Not the same',\r\n  );\r\n});\r\n\r\n/** @test {TorrentLibrary#filterMovies} */\r\ntest('default boolean parameters search', async (t) => {\r\n  let eventSpy = sinon.spy();\r\n  let libInstance = new TorrentLibrary();\r\n  libInstance.on('scan', eventSpy);\r\n  // whatever path that should exists\r\n  await t.notThrows(libInstance.addNewPath(...folders));\r\n  await t.notThrows(libInstance.scan());\r\n  t.truthy(eventSpy.called, 'Event did not fire.');\r\n  t.truthy(eventSpy.calledOnce, 'Event fired more than once');\r\n\r\n  // A simple filter that should returns the only movie that we have\r\n  t.deepEqual(\r\n    new Set([\r\n      Object.assign(\r\n        nameParser(path.basename(files[2])),\r\n        { filePath: files[2] },\r\n      ),\r\n    ]),\r\n    libInstance.filterMovies({\r\n      remastered: true,\r\n    }),\r\n    'Not the same',\r\n  );\r\n\r\n  // A complex filter that should returns nothing\r\n  t.deepEqual(\r\n    new Set(),\r\n    libInstance.filterMovies({\r\n      extended: true,\r\n      unrated: true,\r\n      proper: true,\r\n      repack: true,\r\n      convert: true,\r\n      hardcoded: true,\r\n      retail: true,\r\n      remastered: true,\r\n      additionalProperties: [\r\n        { type: 'boolean', name: 'AnotherField', value: true },\r\n      ],\r\n    }),\r\n    'Not the same',\r\n  );\r\n});\r\n\r\n/** @test {TorrentLibrary#filterMovies} */\r\ntest('default number parameters search', async (t) => {\r\n  let eventSpy = sinon.spy();\r\n  let libInstance = new TorrentLibrary();\r\n  libInstance.on('scan', eventSpy);\r\n  // whatever path that should exists\r\n  await t.notThrows(libInstance.addNewPath(...folders));\r\n  await t.notThrows(libInstance.scan());\r\n  t.truthy(eventSpy.called, 'Event did not fire.');\r\n  t.truthy(eventSpy.calledOnce, 'Event fired more than once');\r\n\r\n  // A simple filter that should returns the only movie that we have\r\n  t.deepEqual(\r\n    new Set([\r\n      Object.assign(\r\n        nameParser(path.basename(files[2])),\r\n        { filePath: files[2] },\r\n      ),\r\n    ]),\r\n    libInstance.filterMovies({\r\n      year: 2012,\r\n    }),\r\n    'Not the same',\r\n  );\r\n\r\n  // A complex filter that should returns nothing\r\n  t.deepEqual(\r\n    new Set(),\r\n    libInstance.filterMovies({\r\n      year: '>=2012',\r\n      additionalProperties: [\r\n        { type: 'number', name: \"whateverFieldThatDoesn'tExist\", value: '<50' },\r\n        { type: 'number', name: 'AnotherField', value: undefined },\r\n        { type: 'number', name: 'AnotherField2', value: '<=25' },\r\n        { type: 'number', name: 'AnotherField3', value: '>25' },\r\n        { type: 'number', name: 'AnotherField4', value: '==25' },\r\n      ],\r\n    }),\r\n    'Not the same',\r\n  );\r\n});\r\n\r\n/** @test {TorrentLibrary#filterMovies} */\r\ntest('default string parameters search', async (t) => {\r\n  let eventSpy = sinon.spy();\r\n  let libInstance = new TorrentLibrary();\r\n  libInstance.on('scan', eventSpy);\r\n  // whatever path that should exists\r\n  await t.notThrows(libInstance.addNewPath(...folders));\r\n  await t.notThrows(libInstance.scan());\r\n  t.truthy(eventSpy.called, 'Event did not fire.');\r\n  t.truthy(eventSpy.calledOnce, 'Event fired more than once');\r\n\r\n  // A simple filter that should returns the only movie that we have\r\n  t.deepEqual(\r\n    new Set([\r\n      Object.assign(\r\n        nameParser(path.basename(files[2])),\r\n        { filePath: files[2] },\r\n      ),\r\n    ]),\r\n    libInstance.filterMovies({\r\n      title: 'Bad Ass',\r\n    }),\r\n    'Not the same',\r\n  );\r\n\r\n  // A complex filter that should returns nothing\r\n  t.deepEqual(\r\n    new Set(),\r\n    libInstance.filterMovies({\r\n      title: 'Bad Ass',\r\n      additionalProperties: [\r\n        {\r\n          type: 'string',\r\n          name: 'whateverField',\r\n          value: ['NothingExists'],\r\n        },\r\n        {\r\n          type: 'string',\r\n          name: 'AnotherField',\r\n          value: ['NothingExists', 'NothingExists'],\r\n        },\r\n        { type: 'string', name: 'AnotherField2', value: '<=25' },\r\n        { type: 'string', name: 'AnotherField3', value: '>25' },\r\n      ],\r\n    }),\r\n    'Not the same',\r\n  );\r\n});\r\n",
    "static": true,
    "longname": "D:/workspaceNodeJs/torrent-files-library/test/methods/filterMovies.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 130,
    "kind": "test",
    "name": "test11",
    "testId": 11,
    "memberof": "test/methods/filterMovies.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/methods/filterMovies.js~test11",
    "access": null,
    "description": "Should work without parameters",
    "lineNumber": 9,
    "testTargets": [
      "TorrentLibrary#filterMovies"
    ]
  },
  {
    "__docId__": 131,
    "kind": "test",
    "name": "test12",
    "testId": 12,
    "memberof": "test/methods/filterMovies.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/methods/filterMovies.js~test12",
    "access": null,
    "description": "default boolean parameters search",
    "lineNumber": 31,
    "testTargets": [
      "TorrentLibrary#filterMovies"
    ]
  },
  {
    "__docId__": 132,
    "kind": "test",
    "name": "test13",
    "testId": 13,
    "memberof": "test/methods/filterMovies.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/methods/filterMovies.js~test13",
    "access": null,
    "description": "default number parameters search",
    "lineNumber": 76,
    "testTargets": [
      "TorrentLibrary#filterMovies"
    ]
  },
  {
    "__docId__": 133,
    "kind": "test",
    "name": "test14",
    "testId": 14,
    "memberof": "test/methods/filterMovies.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/methods/filterMovies.js~test14",
    "access": null,
    "description": "default string parameters search",
    "lineNumber": 118,
    "testTargets": [
      "TorrentLibrary#filterMovies"
    ]
  },
  {
    "__docId__": 134,
    "kind": "testFile",
    "name": "test/methods/filterTvSeries.js",
    "content": "import test from 'ava';\r\nimport * as sinon from 'sinon';\r\nimport { parse as nameParser } from 'parse-torrent-title';\r\nimport path from 'path';\r\nimport TorrentLibrary from '../../index';\r\nimport { files, folders } from '../_constants';\r\n\r\n/** @test {TorrentLibrary#filterTvSeries} */\r\ntest('Should work without parameters', async (t) => {\r\n  let eventSpy = sinon.spy();\r\n  let libInstance = new TorrentLibrary();\r\n  libInstance.on('scan', eventSpy);\r\n  // whatever path that should exists\r\n  await t.notThrows(libInstance.addNewPath(...folders));\r\n  await t.notThrows(libInstance.scan());\r\n  t.truthy(eventSpy.called, 'Event did not fire.');\r\n  t.truthy(eventSpy.calledOnce, 'Event fired more than once');\r\n  t.deepEqual(\r\n    new Map([\r\n      [nameParser(path.basename(files[0])).title, new Set([\r\n        Object.assign(\r\n          nameParser(path.basename(files[0])),\r\n          { filePath: files[0] },\r\n        ),\r\n        Object.assign(\r\n          nameParser(path.basename(files[1])),\r\n          { filePath: files[1] },\r\n        ),\r\n      ])],\r\n    ]),\r\n    libInstance.filterTvSeries(),\r\n    'Not the same',\r\n  );\r\n});\r\n\r\n/** @test {TorrentLibrary#filterTvSeries} */\r\ntest('default boolean parameters search', async (t) => {\r\n  let eventSpy = sinon.spy();\r\n  let libInstance = new TorrentLibrary();\r\n  libInstance.on('scan', eventSpy);\r\n  // whatever path that should exists\r\n  await t.notThrows(libInstance.addNewPath(...folders));\r\n  await t.notThrows(libInstance.scan());\r\n  t.truthy(eventSpy.called, 'Event did not fire.');\r\n  t.truthy(eventSpy.calledOnce, 'Event fired more than once');\r\n\r\n\r\n  // A complex filter that should returns nothing\r\n  t.deepEqual(\r\n    new Map(),\r\n    libInstance.filterTvSeries({\r\n      extended: true,\r\n      unrated: true,\r\n      proper: true,\r\n      repack: true,\r\n      convert: true,\r\n      hardcoded: true,\r\n      retail: true,\r\n      remastered: true,\r\n      additionalProperties: [\r\n        { type: 'boolean', name: 'AnotherField', value: true },\r\n      ],\r\n    }),\r\n    'Not the same',\r\n  );\r\n});\r\n\r\n/** @test {TorrentLibrary#filterTvSeries} */\r\ntest('default number parameters search', async (t) => {\r\n  let eventSpy = sinon.spy();\r\n  let libInstance = new TorrentLibrary();\r\n  libInstance.on('scan', eventSpy);\r\n  // whatever path that should exists\r\n  await t.notThrows(libInstance.addNewPath(...folders));\r\n  await t.notThrows(libInstance.scan());\r\n  t.truthy(eventSpy.called, 'Event did not fire.');\r\n  t.truthy(eventSpy.calledOnce, 'Event fired more than once');\r\n\r\n  // A simple filter that should returns the two tv series that we have\r\n  t.deepEqual(\r\n    new Map([\r\n      [nameParser(path.basename(files[0])).title, new Set([\r\n        Object.assign(\r\n          nameParser(path.basename(files[0])),\r\n          { filePath: files[0] },\r\n        ),\r\n        Object.assign(\r\n          nameParser(path.basename(files[1])),\r\n          { filePath: files[1] },\r\n        ),\r\n      ])],\r\n    ]),\r\n    libInstance.filterTvSeries({\r\n      season: 4,\r\n    }),\r\n    'Not the same',\r\n  );\r\n\r\n  // A complex filter that should returns nothing\r\n  t.deepEqual(\r\n    new Map(),\r\n    libInstance.filterTvSeries({\r\n      season: '>=4',\r\n      additionalProperties: [\r\n        { type: 'number', name: \"whateverFieldThatDoesn'tExist\", value: '<50' },\r\n        { type: 'number', name: 'AnotherField', value: undefined },\r\n        { type: 'number', name: 'AnotherField2', value: '<=25' },\r\n        { type: 'number', name: 'AnotherField3', value: '>25' },\r\n        { type: 'number', name: 'AnotherField4', value: '==25' },\r\n      ],\r\n    }),\r\n    'Not the same',\r\n  );\r\n});\r\n\r\n/** @test {TorrentLibrary#filterTvSeries} */\r\ntest('default string parameters search', async (t) => {\r\n  let eventSpy = sinon.spy();\r\n  let libInstance = new TorrentLibrary();\r\n  libInstance.on('scan', eventSpy);\r\n  // whatever path that should exists\r\n  await t.notThrows(libInstance.addNewPath(...folders));\r\n  await t.notThrows(libInstance.scan());\r\n  t.truthy(eventSpy.called, 'Event did not fire.');\r\n  t.truthy(eventSpy.calledOnce, 'Event fired more than once');\r\n\r\n  // A simple filter that should returns the only movie that we have\r\n  t.deepEqual(\r\n    new Map([\r\n      [nameParser(path.basename(files[0])).title, new Set([\r\n        Object.assign(\r\n          nameParser(path.basename(files[0])),\r\n          { filePath: files[0] },\r\n        ),\r\n        Object.assign(\r\n          nameParser(path.basename(files[1])),\r\n          { filePath: files[1] },\r\n        ),\r\n      ])],\r\n    ]),\r\n    libInstance.filterTvSeries({\r\n      title: 'The Blacklist',\r\n    }),\r\n    'Not the same',\r\n  );\r\n\r\n  // A complex filter that should returns nothing\r\n  t.deepEqual(\r\n    new Map(),\r\n    libInstance.filterTvSeries({\r\n      title: 'The Blacklist',\r\n      additionalProperties: [\r\n        {\r\n          type: 'string',\r\n          name: 'whateverField',\r\n          value: ['NothingExists'],\r\n        },\r\n        {\r\n          type: 'string',\r\n          name: 'AnotherField',\r\n          value: ['NothingExists', 'NothingExists'],\r\n        },\r\n        { type: 'string', name: 'AnotherField2', value: '<=25' },\r\n        { type: 'string', name: 'AnotherField3', value: '>25' },\r\n      ],\r\n    }),\r\n    'Not the same',\r\n  );\r\n});\r\n",
    "static": true,
    "longname": "D:/workspaceNodeJs/torrent-files-library/test/methods/filterTvSeries.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 135,
    "kind": "test",
    "name": "test15",
    "testId": 15,
    "memberof": "test/methods/filterTvSeries.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/methods/filterTvSeries.js~test15",
    "access": null,
    "description": "Should work without parameters",
    "lineNumber": 9,
    "testTargets": [
      "TorrentLibrary#filterTvSeries"
    ]
  },
  {
    "__docId__": 136,
    "kind": "test",
    "name": "test16",
    "testId": 16,
    "memberof": "test/methods/filterTvSeries.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/methods/filterTvSeries.js~test16",
    "access": null,
    "description": "default boolean parameters search",
    "lineNumber": 37,
    "testTargets": [
      "TorrentLibrary#filterTvSeries"
    ]
  },
  {
    "__docId__": 137,
    "kind": "test",
    "name": "test17",
    "testId": 17,
    "memberof": "test/methods/filterTvSeries.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/methods/filterTvSeries.js~test17",
    "access": null,
    "description": "default number parameters search",
    "lineNumber": 69,
    "testTargets": [
      "TorrentLibrary#filterTvSeries"
    ]
  },
  {
    "__docId__": 138,
    "kind": "test",
    "name": "test18",
    "testId": 18,
    "memberof": "test/methods/filterTvSeries.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/methods/filterTvSeries.js~test18",
    "access": null,
    "description": "default string parameters search",
    "lineNumber": 117,
    "testTargets": [
      "TorrentLibrary#filterTvSeries"
    ]
  },
  {
    "__docId__": 139,
    "kind": "testFile",
    "name": "test/methods/removeOldFiles.js",
    "content": "import test from 'ava';\r\nimport path from 'path';\r\nimport * as sinon from 'sinon';\r\nimport { parse as nameParser } from 'parse-torrent-title';\r\nimport TorrentLibrary from '../../index';\r\nimport { files, folders, expectedJson } from '../_constants';\r\n\r\n/** @test {TorrentLibrary#removeOldFiles} */\r\ntest('Should not be able to remove not present files', async (t) => {\r\n  let libInstance = new TorrentLibrary();\r\n  await t.notThrows(libInstance.addNewPath(...folders));\r\n  await t.notThrows(libInstance.scan());\r\n  const wrongFile = path.join(\r\n    __dirname, 'folder1',\r\n    'The.Blacklist.S04E22.FRENCH.WEBRip.XviD.avi',\r\n  );\r\n  const allFiles = libInstance.allFilesWithCategory;\r\n  const expectedTvSeriesMap = libInstance.allTvSeries;\r\n  await t.notThrows(libInstance.removeOldFiles(wrongFile));\r\n  t.deepEqual(\r\n    libInstance.allFilesWithCategory,\r\n    allFiles,\r\n    'Nothing should have changed!',\r\n  );\r\n  t.deepEqual(\r\n    libInstance.allTvSeries,\r\n    expectedTvSeriesMap,\r\n    'Nothing should have changed!',\r\n  );\r\n});\r\n\r\n/** @test {TorrentLibrary#removeOldFiles} */\r\ntest('Should be able to remove a movie', async (t) => {\r\n  let libInstance = new TorrentLibrary();\r\n  let eventSpy = sinon.spy();\r\n  await t.notThrows(libInstance.addNewPath(...folders));\r\n  await t.notThrows(libInstance.scan());\r\n  const allFilesWithoutMovie = libInstance.allFilesWithCategory;\r\n  // files[2] ; Bad Ass\r\n  allFilesWithoutMovie.delete(files[2]);\r\n\r\n  libInstance.on('removeOldFiles', eventSpy);\r\n  // files[2] ; Bad Ass\r\n  await t.notThrows(libInstance.removeOldFiles(files[2]));\r\n  t.deepEqual(\r\n    libInstance.allMovies,\r\n    new Set(),\r\n    'The movie should have been removed!',\r\n  );\r\n\r\n  t.deepEqual(\r\n    libInstance.allFilesWithCategory,\r\n    allFilesWithoutMovie,\r\n    'The movie should have been removed!',\r\n  );\r\n  t.truthy(eventSpy.called, 'Event did not fire.');\r\n  t.truthy(eventSpy.calledOnce, 'Event fired more than once');\r\n});\r\n\r\n/** @test {TorrentLibrary#removeOldFiles} */\r\ntest('Should be able to remove an tv-serie episode', async (t) => {\r\n  let libInstance = new TorrentLibrary();\r\n  let eventSpy = sinon.spy();\r\n  await t.notThrows(libInstance.addNewPath(...folders));\r\n  await t.notThrows(libInstance.scan());\r\n  const allFilesWithoutIt = libInstance.allFilesWithCategory;\r\n  // files[1] ; The.Blacklist.S04E21\r\n  allFilesWithoutIt.delete(files[1]);\r\n\r\n  libInstance.on('removeOldFiles', eventSpy);\r\n  // files[1] ; The.Blacklist.S04E21\r\n  await t.notThrows(libInstance.removeOldFiles(files[1]));\r\n  t.deepEqual(\r\n    libInstance.allTvSeries,\r\n    new Map([\r\n      [nameParser(path.basename(files[0])).title, new Set([\r\n        Object.assign(\r\n          nameParser(path.basename(files[0])),\r\n          { filePath: files[0] },\r\n        ),\r\n      ])],\r\n    ]),\r\n    'The tv-series should still exist!',\r\n  );\r\n\r\n  t.deepEqual(\r\n    libInstance.allFilesWithCategory,\r\n    allFilesWithoutIt,\r\n    'The tv-series episode should have been removed!',\r\n  );\r\n  t.truthy(eventSpy.called, 'Event did not fire.');\r\n  t.truthy(eventSpy.calledOnce, 'Event fired more than once');\r\n});\r\n\r\n/** @test {TorrentLibrary#removeOldFiles} */\r\ntest('Should be able to remove multiples files : Tv-serie', async (t) => {\r\n  let libInstance = new TorrentLibrary();\r\n  let eventSpy = sinon.spy();\r\n  await t.notThrows(libInstance.addNewPath(...folders));\r\n  await t.notThrows(libInstance.scan());\r\n  const allFilesWithoutIt = libInstance.allFilesWithCategory;\r\n\r\n  allFilesWithoutIt.delete(files[1]);\r\n  allFilesWithoutIt.delete(files[0]);\r\n\r\n  libInstance.on('removeOldFiles', eventSpy);\r\n  await t.notThrows(libInstance.removeOldFiles(...files.slice(0, 2)));\r\n  t.deepEqual(\r\n    libInstance.allTvSeries,\r\n    new Map(),\r\n    'The tv-series episodes should have all been removed!',\r\n  );\r\n\r\n  t.deepEqual(\r\n    libInstance.allFilesWithCategory,\r\n    allFilesWithoutIt,\r\n    'The tv-series episodes should have all been removed!',\r\n  );\r\n  t.truthy(eventSpy.called, 'Event did not fire.');\r\n  t.truthy(eventSpy.calledOnce, 'Event fired more than once');\r\n});\r\n\r\n// test to handle default parameters\r\n/** @test {TorrentLibrary#removeOldFiles} */\r\ntest('Should not be able to remove files : wrong custom parser', async (t) => {\r\n  let libInstance = TorrentLibrary.createFromJSON(expectedJson, {});\r\n  let eventSpy = sinon.spy();\r\n  libInstance.on('error_in_function', eventSpy);\r\n  await t.throws(libInstance.removeOldFiles(...files));\r\n  t.truthy(eventSpy.called, 'Event did not fire.');\r\n  t.truthy(eventSpy.calledOnce, 'Event fired more than once');\r\n});\r\n",
    "static": true,
    "longname": "D:/workspaceNodeJs/torrent-files-library/test/methods/removeOldFiles.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "test",
    "name": "test19",
    "testId": 19,
    "memberof": "test/methods/removeOldFiles.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/methods/removeOldFiles.js~test19",
    "access": null,
    "description": "Should not be able to remove not present files",
    "lineNumber": 9,
    "testTargets": [
      "TorrentLibrary#removeOldFiles"
    ]
  },
  {
    "__docId__": 141,
    "kind": "test",
    "name": "test20",
    "testId": 20,
    "memberof": "test/methods/removeOldFiles.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/methods/removeOldFiles.js~test20",
    "access": null,
    "description": "Should be able to remove a movie",
    "lineNumber": 33,
    "testTargets": [
      "TorrentLibrary#removeOldFiles"
    ]
  },
  {
    "__docId__": 142,
    "kind": "test",
    "name": "test21",
    "testId": 21,
    "memberof": "test/methods/removeOldFiles.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/methods/removeOldFiles.js~test21",
    "access": null,
    "description": "Should be able to remove an tv-serie episode",
    "lineNumber": 61,
    "testTargets": [
      "TorrentLibrary#removeOldFiles"
    ]
  },
  {
    "__docId__": 143,
    "kind": "test",
    "name": "test22",
    "testId": 22,
    "memberof": "test/methods/removeOldFiles.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/methods/removeOldFiles.js~test22",
    "access": null,
    "description": "Should be able to remove multiples files : Tv-serie",
    "lineNumber": 96,
    "testTargets": [
      "TorrentLibrary#removeOldFiles"
    ]
  },
  {
    "__docId__": 144,
    "kind": "test",
    "name": "test23",
    "testId": 23,
    "memberof": "test/methods/removeOldFiles.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/methods/removeOldFiles.js~test23",
    "access": null,
    "description": "Should not be able to remove files : wrong custom parser",
    "lineNumber": 125,
    "testTargets": [
      "TorrentLibrary#removeOldFiles"
    ]
  },
  {
    "__docId__": 145,
    "kind": "testFile",
    "name": "test/methods/scan.js",
    "content": "import test from 'ava';\r\nimport * as sinon from 'sinon';\r\nimport { parse as nameParser } from 'parse-torrent-title';\r\nimport TorrentLibrary from '../../index';\r\nimport { folders } from '../_constants';\r\n\r\n// TESTS\r\n/** @test {TorrentLibrary#scan} */\r\ntest('Scan without user provided paths', async (t) => {\r\n  let eventSpy = sinon.spy();\r\n  let libInstance = new TorrentLibrary();\r\n  libInstance.on('scan', eventSpy);\r\n  await t.notThrows(libInstance.scan());\r\n  t.truthy(eventSpy.called, 'Event did not fire.');\r\n  t.truthy(eventSpy.calledOnce, 'Event fired more than once');\r\n});\r\n\r\n/** @test {TorrentLibrary#scan} */\r\ntest('Scan with user provided paths', async (t) => {\r\n  let eventSpy = sinon.spy();\r\n  let libInstance = new TorrentLibrary();\r\n  libInstance.on('scan', eventSpy);\r\n  // whatever path that should exists\r\n  await t.notThrows(libInstance.addNewPath(...folders));\r\n  await t.notThrows(libInstance.scan());\r\n  t.truthy(eventSpy.called, 'Event did not fire.');\r\n  t.truthy(eventSpy.calledOnce, 'Event fired more than once');\r\n});\r\n\r\n// test to handle default parameters\r\n/** @test {TorrentLibrary#scan} */\r\ntest('Scan with user provided paths and custom parser', async (t) => {\r\n  let eventSpy = sinon.spy();\r\n  let libInstance = new TorrentLibrary({}, nameParser);\r\n  libInstance.on('scan', eventSpy);\r\n  // whatever path that should exists\r\n  await t.notThrows(libInstance.addNewPath(...folders));\r\n  await t.notThrows(libInstance.scan());\r\n  t.truthy(eventSpy.called, 'Event did not fire.');\r\n  t.truthy(eventSpy.calledOnce, 'Event fired more than once');\r\n});\r\n\r\n/** @test {TorrentLibrary#scan} */\r\ntest('Scan with user provided paths and wrong custom parser', async (t) => {\r\n  let eventSpy = sinon.spy();\r\n  let libInstance = new TorrentLibrary({}, {});\r\n  libInstance.on('error_in_function', eventSpy);\r\n  // whatever path that should exists\r\n  await t.notThrows(libInstance.addNewPath(...folders));\r\n  await t.throws(libInstance.scan());\r\n  t.truthy(eventSpy.called, 'Event did not fire.');\r\n  t.truthy(eventSpy.calledOnce, 'Event fired more than once');\r\n});\r\n",
    "static": true,
    "longname": "D:/workspaceNodeJs/torrent-files-library/test/methods/scan.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 146,
    "kind": "test",
    "name": "test24",
    "testId": 24,
    "memberof": "test/methods/scan.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/methods/scan.js~test24",
    "access": null,
    "description": "Scan without user provided paths",
    "lineNumber": 9,
    "testTargets": [
      "TorrentLibrary#scan"
    ]
  },
  {
    "__docId__": 147,
    "kind": "test",
    "name": "test25",
    "testId": 25,
    "memberof": "test/methods/scan.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/methods/scan.js~test25",
    "access": null,
    "description": "Scan with user provided paths",
    "lineNumber": 19,
    "testTargets": [
      "TorrentLibrary#scan"
    ]
  },
  {
    "__docId__": 148,
    "kind": "test",
    "name": "test26",
    "testId": 26,
    "memberof": "test/methods/scan.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/methods/scan.js~test26",
    "access": null,
    "description": "Scan with user provided paths and custom parser",
    "lineNumber": 32,
    "testTargets": [
      "TorrentLibrary#scan"
    ]
  },
  {
    "__docId__": 149,
    "kind": "test",
    "name": "test27",
    "testId": 27,
    "memberof": "test/methods/scan.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/methods/scan.js~test27",
    "access": null,
    "description": "Scan with user provided paths and wrong custom parser",
    "lineNumber": 44,
    "testTargets": [
      "TorrentLibrary#scan"
    ]
  },
  {
    "__docId__": 150,
    "kind": "testFile",
    "name": "test/methods/toJSON.js",
    "content": "import test from 'ava';\r\nimport TorrentLibrary from '../../index';\r\nimport { expectedJson, folders } from '../_constants';\r\n\r\n/** @test {TorrentLibrary#toJSON} */\r\ntest('return a valid stringified JSON', async (t) => {\r\n  const expectedJsonString = JSON.stringify(expectedJson);\r\n  let libInstance = new TorrentLibrary();\r\n  await t.notThrows(libInstance.addNewPath(...folders));\r\n  await t.notThrows(libInstance.scan());\r\n  const dataFromInstance = libInstance.toJSON();\r\n  t.deepEqual(\r\n    JSON.stringify(JSON.parse(dataFromInstance)),\r\n    expectedJsonString,\r\n    'Not the same JSON',\r\n  );\r\n});\r\n",
    "static": true,
    "longname": "D:/workspaceNodeJs/torrent-files-library/test/methods/toJSON.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 151,
    "kind": "test",
    "name": "test28",
    "testId": 28,
    "memberof": "test/methods/toJSON.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/methods/toJSON.js~test28",
    "access": null,
    "description": "return a valid stringified JSON",
    "lineNumber": 6,
    "testTargets": [
      "TorrentLibrary#toJSON"
    ]
  }
]